*------------------------------------------------------------*
User:                bteric01
Date:                November 17, 2015
Time:                14:23:32
Site:                70080760
Platform:            X64_7PRO
Maintenance Release: 9.04.01M1P120413
EM Version:          13.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 17, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:20" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 17, 2015
Time:                14:23:20
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1G8FL7F "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1G8FL7F new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 17, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:20" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 17, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:20" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
52841      proc freq data=EMWS1.Neural2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural2_VariableSet noprint;
52842      table ROLE*LEVEL/out=WORK.Neural2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Neural2META;
52843      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.NEURAL2_VARIABLESET.
NOTE: The data set WORK.NEURAL2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
52844      proc print data=WORK.Neural2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural2META label noobs;
52845      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
52846      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
52847      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52848      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
52849      run;
 
NOTE: There were 5 observations read from the data set WORK.NEURAL2META.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
52850      title10;
MPRINT(EM_DIAGRAM):   title10;
52851      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='SalePrice'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL='SalePrice'
                         FORMAT='BEST.'
                         INFORMAT=''
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[23069]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.BINNING_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Neural2_SalePrice_DD(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Determine decision variables for SalePrice;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Neural2_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN;
MPRINT(EM_DIAGRAM):   keep SalePrice;
MPRINT(EM_DIAGRAM):   keep 'P_SalePrice'n;
MPRINT(EM_DIAGRAM):   'P_SalePrice'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_SalePrice_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
"No decisions defined for target "SalePrice"."
52912      proc print data = EMWS1.Neural2_SalePrice_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural2_SalePrice_DM noobs label;
52913      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
52914      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
52915      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
52916      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52917      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
52918      run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_SALEPRICE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
52919      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1DW_UA3;
MPRINT(EM_DIAGRAM):   set WORK.M1DW_UA3;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
52929      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
52930      * Neural2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural2: Create decision matrix;
52931      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52932      data WORK.SalePrice(label="SalePrice");
MPRINT(EM_DIAGRAM):   data WORK.SalePrice(label="SalePrice");
52933        length   SalePrice                            8
52934                 ;
MPRINT(EM_DIAGRAM):   length SalePrice 8 ;
52935
52936        label    SalePrice="SalePrice"
52937                 ;
MPRINT(EM_DIAGRAM):   label SalePrice= "SalePrice" ;
52938       SalePrice=49539;
MPRINT(EM_DIAGRAM):   SalePrice=49539;
52939      output;
MPRINT(EM_DIAGRAM):   output;
52940       SalePrice=121984;
MPRINT(EM_DIAGRAM):   SalePrice=121984;
52941      output;
MPRINT(EM_DIAGRAM):   output;
52942       SalePrice=76154.1162790697;
MPRINT(EM_DIAGRAM):   SalePrice=76154.1162790697;
52943      output;
MPRINT(EM_DIAGRAM):   output;
52944      ;
MPRINT(EM_DIAGRAM):   ;
52945      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52946      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
52947      modify SalePrice(type=PROFIT label=SalePrice);
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
52948      run;
 
NOTE: MODIFY was successful for WORK.SALEPRICE.DATA.
52949      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
52950      data EM_Neural2;
MPRINT(EM_DIAGRAM):   data EM_Neural2;
52951      set EMWS1.BINNING_TRAIN(keep=
52952      GRP_Age GRP_TotalArea SalePrice);
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN(keep= GRP_Age GRP_TotalArea SalePrice);
52953      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 145 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.FILTER_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: There were 129 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: The data set WORK.EM_NEURAL2 has 129 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52954      *------------------------------------------------------------* ;
52955      * Neural2: DMDBClass Macro ;
52956      *------------------------------------------------------------* ;
52957      %macro DMDBClass;
52958          GRP_Age(ASC) GRP_TotalArea(ASC)
52959      %mend DMDBClass;
52960      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52961      * Neural2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: DMDBVar Macro ;
52962      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52963      %macro DMDBVar;
52964          SalePrice
52965      %mend DMDBVar;
52966      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52967      * Neural2: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural2: Create DMDB;
52968      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52969      proc dmdb batch data=WORK.EM_Neural2
52970      dmdbcat=WORK.Neural2_DMDB
52971      maxlevel = 513
52972      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural2 dmdbcat=WORK.Neural2_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
52973      class %DMDBClass;
MPRINT(DMDBCLASS):   GRP_Age(ASC) GRP_TotalArea(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
52974      var %DMDBVar;
MPRINT(DMDBVAR):   SalePrice
MPRINT(EM_DIAGRAM):  ;
52975      target
52976      SalePrice
52977      ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
52978      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 129   Memory used = 511K.
NOTE: There were 129 observations read from the data set WORK.EM_NEURAL2.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
52979      quit;
52980      *--- end code ---*;
 
52981      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
52982      * Neural2: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Interval Input Variables Macro ;
52983      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52984      %macro INTINPUTS;
52985
52986      %mend INTINPUTS;
52987      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52988      * Neural2: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Binary Inputs Macro ;
52989      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52990      %macro BININPUTS;
52991
52992      %mend BININPUTS;
52993      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52994      * Neural2: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Nominal Inputs Macro ;
52995      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
52996      %macro NOMINPUTS;
52997
52998      %mend NOMINPUTS;
52999      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
53000      * Neural2: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Ordinal Inputs Macro ;
53001      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
53002      %macro ORDINPUTS;
53003          GRP_Age GRP_TotalArea
53004      %mend ORDINPUTS;
53005      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53006      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
53007      ;
MPRINT(EM_DIAGRAM):   ;
53008      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53009      proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB
53010      validdata = EMWS1.BINNING_VALIDATE
53011      random=12345
53012      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB validdata = EMWS1.BINNING_VALIDATE random=12345 ;
53013      nloptions
53014      ;
MPRINT(EM_DIAGRAM):   nloptions ;
53015      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
53016      netopts
53017      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
53018      input %ORDINPUTS / level=ordinal id=ord
MPRINT(ORDINPUTS):   GRP_Age GRP_TotalArea
53019      ;
MPRINT(EM_DIAGRAM):   / level=ordinal id=ord ;
53020      target
53021      SalePrice
53022      / level=interval id=intervalTargets
53023      bias
53024      ;
MPRINT(EM_DIAGRAM):   target SalePrice / level=interval id=intervalTargets bias ;
53025      arch MLP
53026      Hidden=3
53027      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
53028      Prelim 5 preiter=10
53029      pretime=3600
53030      Outest=EMWS1.Neural2_PRELIM_OUTEST
53031      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS1.Neural2_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: The data set EMWS1.NEURAL2_PRELIM_OUTEST has 11 observations and 40 variables.
53032      save network=EMWS1.Neural2_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural2_NETWORK.dm_neural;
NOTE: Creating a new Catalogue with entry EMWS1.NEURAL2_NETWORK.DM_NEURAL.
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been closed.
53033      train Maxiter=50
53034      maxtime=14400
53035      Outest=EMWS1.Neural2_outest estiter=1
53036      Outfit=EMWS1.Neural2_OUTFIT
53037      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS1.Neural2_outest estiter=1 Outfit=EMWS1.Neural2_OUTFIT ;
NOTE: Convergence criterion (FCONV=0.0001) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: The data set EMWS1.NEURAL2_OUTEST has 38 observations and 40 variables.
NOTE: The data set EMWS1.NEURAL2_OUTFIT has 24 observations and 36 variables.
53038      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL2 has 129 observations and 3 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 24 variables.
NOTE: There were 109 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.FILTER_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.57 seconds
      cpu time            0.36 seconds
 
NOTE: There were 109 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 14-17.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           1.00 seconds
      cpu time            0.39 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
53039      quit;
 
53040      proc sort data=EMWS1.Neural2_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural2;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural2;
53041      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
53042      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL2_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL2 has 12 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53043      %GLOBAL ITER;
53044      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
53045      set fit_Neural2(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural2(obs=1);
53046      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
53047      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53048      data EMWS1.Neural2_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_INITIAL;
53049      set EMWS1.Neural2_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_outest(where=(_ITER_ eq 10 and _OBJ_ ne .));
53050      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_OUTEST.
      WHERE (_ITER_=10) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL2_INITIAL has 2 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53051      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
53052      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
53053      ;
MPRINT(EM_DIAGRAM):   ;
53054      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53055      proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB
53056      validdata = EMWS1.BINNING_VALIDATE
53057      network = EMWS1.Neural2_NETWORK.dm_neural
53058      random=12345
53059      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB validdata = EMWS1.BINNING_VALIDATE network = EMWS1.Neural2_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been closed.
53060      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
53061      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
53062      initial inest=EMWS1.Neural2_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural2_INITIAL;
NOTE: The data set EMWS1.NEURAL2_INITIAL has 2 observations and 40 variables.
53063      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
53064      code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\SCORECODE.sas"
53065      group=Neural2
53066      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\SCORECODE.sas" group=Neural2 ;
NOTE: External file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\SCORECODE.sas opened.
53067      ;
MPRINT(EM_DIAGRAM):   ;
53068      code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas"
53069      group=Neural2
53070      residual
53071      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas" group=Neural2 residual ;
NOTE: External file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas opened.
53072      ;
MPRINT(EM_DIAGRAM):   ;
53073      score data=EMWS1.BINNING_TRAIN out=_NULL_
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.28 seconds
 
53074      outfit=WORK.FIT1
53075      role=TRAIN
53076      outkey=EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN outkey=EMWS1.Neural2_OUTKEY;
NOTE: The data set EMWS1.NEURAL2_OUTKEY has 13 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_TRAIN has . observations and 24 variables.
NOTE: There were 145 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.FILTER_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
53077      score data=EMWS1.BINNING_VALIDATE out=_NULL_
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
53078      outfit=WORK.FIT2
53079      role=VALID
53080      outkey=EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID outkey=EMWS1.Neural2_OUTKEY;
NOTE: The data set EMWS1.NEURAL2_OUTKEY has 13 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 24 variables.
NOTE: There were 109 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.FILTER_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
53081      score data=EMWS1.BINNING_TEST out=_NULL_
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.25 seconds
 
53082      outfit=WORK.FIT3
53083      role=TEST
53084      outkey=EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_TEST out=_NULL_ outfit=WORK.FIT3 role=TEST outkey=EMWS1.Neural2_OUTKEY;
NOTE: The data set EMWS1.NEURAL2_OUTKEY has 13 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_TEST has . observations and 24 variables.
NOTE: There were 109 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 109 observations read from the data set EMWS1.FILTER_TEST.
NOTE: There were 109 observations read from the data set EMWS1.VARSEL_TEST.
NOTE: There were 109 observations read from the data set EMWS1.TRANS_TEST.
NOTE: The data set WORK.FIT3 has 2 observations and 25 variables.
53085      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL2 has 129 observations and 3 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 24 variables.
NOTE: There were 109 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.FILTER_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           1.09 seconds
      cpu time            1.07 seconds
 
NOTE: There were 109 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           1.12 seconds
      cpu time            1.11 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
53086      quit;
53087      data EMWS1.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_OUTFIT;
53088      merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
53089      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: There were 2 observations read from the data set WORK.FIT3.
NOTE: The data set EMWS1.NEURAL2_OUTFIT has 2 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53090      data EMWS1.Neural2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMESTIMATE;
53091      set EMWS1.Neural2_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_outest;
53092      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
53093      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.NEURAL2_OUTEST.
NOTE: The data set EMWS1.NEURAL2_EMESTIMATE has 12 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53094      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
53095      delete EM_Neural2;
MPRINT(EM_DIAGRAM):   delete EM_Neural2;
53096      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL2 (memtype=DATA).
53097      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
53098      data EMWS1.Neural2_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
53099      set fit_Neural2;
MPRINT(EM_DIAGRAM):   set fit_Neural2;
53100      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
53101      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
53102      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.FIT_NEURAL2.
NOTE: The data set EMWS1.NEURAL2_PLOTDS has 12 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
53103      proc sort data=EMWS1.Neural2_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_PLOTDS;
53104      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
53105      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: The data set EMWS1.NEURAL2_PLOTDS has 12 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
53106      data EMWS1.Neural2_PLOTDS;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_PLOTDS;
53107      set EMWS1.Neural2_PLOTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_PLOTDS;
53108      drop _MISC_;
MPRINT(EM_DIAGRAM):   drop _MISC_;
53109      drop _WRONG_;
MPRINT(EM_DIAGRAM):   drop _WRONG_;
53110      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: The data set EMWS1.NEURAL2_PLOTDS has 12 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53111      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 10) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 10) );
53112      set EMWS1.Neural2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMESTIMATE;
53113      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL2_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 2 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53114      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
53115      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
53116      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 2 observations and 32 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53117      proc transpose data=tempweight out=EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural2_WEIGHTDS;
53118      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
53119      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 60 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
53120      data EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_WEIGHTDS;
53121      set EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_WEIGHTDS;
53122      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
53123      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
53124      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
53125      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
53126      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
53127         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
53128      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
53129      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set EMWS1.NEURAL2_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
53130      proc sort data=EMWS1.Neural2_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_WEIGHTDS nodupkey;
53131      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
53132      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set EMWS1.NEURAL2_WEIGHTDS.
NOTE: 25 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 25 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 17, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:25" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 17, 2015
Time:                14:23:25
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O06ZFD_8 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O06ZFD_8 new;
MPRINT(EM_DIAGRAM):   run;
53234      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
53235      set EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTKEY;
53236      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
53237      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.NEURAL2_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53238      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53239      *------------------------------------------------------------*;
53240      * Neural2: Scoring DATA data;
53241      *------------------------------------------------------------*;
53242      data EMWS1.Neural2_TRAIN
53243      / view=EMWS1.Neural2_TRAIN
53244      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TRAIN / view=EMWS1.Neural2_TRAIN ;
53245      set EMWS1.BINNING_TRAIN
53246      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN ;
53247      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
53248     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53249     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
53250     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53251     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
53252     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
53253     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
53254     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
53255     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
53256     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
53257     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
53258     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
53259     +LENGTH _WARN_ $4
53260     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
53261     +      label GRP_Age2 = 'Dummy: GRP_Age=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Age2 = 'Dummy: GRP_Age=2' ;
53262     +
53263     +      label GRP_Age3 = 'Dummy: GRP_Age=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Age3 = 'Dummy: GRP_Age=3' ;
53264     +
53265     +      label GRP_Age4 = 'Dummy: GRP_Age=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Age4 = 'Dummy: GRP_Age=4' ;
53266     +
53267     +      label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
53268     +
53269     +      label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
53270     +
53271     +      label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
53272     +
53273     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
53274     +
53275     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
53276     +
53277     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
53278     +
53279     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
53280     +
53281     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
53282     +
53283     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
53284     +
53285     +*** Generate dummy variables for GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Age ;
53286     +drop GRP_Age2 GRP_Age3 GRP_Age4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Age2 GRP_Age3 GRP_Age4 ;
53287     +if missing( GRP_Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Age ) then do;
53288     +   GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53289     +   GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53290     +   GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53291     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53292     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53293     +end;
MPRINT(EM_DIAGRAM):   end;
53294     +else do;
MPRINT(EM_DIAGRAM):   else do;
53295     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53296     +   _dm12 = put( GRP_Age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Age , BEST12. );
53297     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53298     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53299     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53300     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53301     +      GRP_Age4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = 0.63245553203367;
53302     +   end;
MPRINT(EM_DIAGRAM):   end;
53303     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53304     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53305     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53306     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53307     +   end;
MPRINT(EM_DIAGRAM):   end;
53308     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53309     +      GRP_Age2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = -0.63245553203367;
53310     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53311     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53312     +   end;
MPRINT(EM_DIAGRAM):   end;
53313     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53314     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53315     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53316     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53317     +   end;
MPRINT(EM_DIAGRAM):   end;
53318     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53319     +      GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53320     +      GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53321     +      GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53322     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53323     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53324     +   end;
MPRINT(EM_DIAGRAM):   end;
53325     +end;
MPRINT(EM_DIAGRAM):   end;
53326     +
53327     +*** Generate dummy variables for GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_TotalArea ;
53328     +drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
53329     +if missing( GRP_TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_TotalArea ) then do;
53330     +   GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53331     +   GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53332     +   GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53333     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53334     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53335     +end;
MPRINT(EM_DIAGRAM):   end;
53336     +else do;
MPRINT(EM_DIAGRAM):   else do;
53337     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53338     +   _dm12 = put( GRP_TotalArea , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_TotalArea , BEST12. );
53339     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53340     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53341     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53342     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53343     +      GRP_TotalArea4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = 0.63245553203367;
53344     +   end;
MPRINT(EM_DIAGRAM):   end;
53345     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53346     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53347     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53348     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53349     +   end;
MPRINT(EM_DIAGRAM):   end;
53350     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53351     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53352     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53353     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53354     +   end;
MPRINT(EM_DIAGRAM):   end;
53355     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53356     +      GRP_TotalArea2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = -0.63245553203367;
53357     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53358     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53359     +   end;
MPRINT(EM_DIAGRAM):   end;
53360     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53361     +      GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53362     +      GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53363     +      GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53364     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53365     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53366     +   end;
MPRINT(EM_DIAGRAM):   end;
53367     +end;
MPRINT(EM_DIAGRAM):   end;
53368     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53369     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
53370     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53371     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53372     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
53373     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53374     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53375     +   H11  =  1.0000000827403E-10 * GRP_Age2  +  1.0000000827403E-10 * GRP_Age3
53376     +          +     18.9559961302211 * GRP_Age4  +  1.0000000827403E-10 *
53377     +        GRP_TotalArea2  +     14.7725771784866 * GRP_TotalArea3
53378     +          +      82.296259261635 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H11 = 1.0000000827403E-10 * GRP_Age2 + 1.0000000827403E-10 * GRP_Age3 + 18.9559961302211 * GRP_Age4 + 1.0000000827403E-10 * GRP_TotalArea2 + 14.7725771784866 * GRP_TotalArea3 + 82.296259261635 * GRP_TotalArea4 ;
53379     +   H12  =     3.15340711708705 * GRP_Age2  +      7.7019890208257 * GRP_Age3
53380     +          +  1.0000000827403E-10 * GRP_Age4  +     19.1423937009409 *
53381     +        GRP_TotalArea2  +  1.0000000827403E-10 * GRP_TotalArea3
53382     +          +     16.0556035718679 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H12 = 3.15340711708705 * GRP_Age2 + 7.7019890208257 * GRP_Age3 + 1.0000000827403E-10 * GRP_Age4 + 19.1423937009409 * GRP_TotalArea2 + 1.0000000827403E-10 * GRP_TotalArea3 + 16.0556035718679 * GRP_TotalArea4 ;
53383     +   H13  =      159.41309684645 * GRP_Age2  +     235.223316073762 * GRP_Age3
53384     +          +     155.697624338212 * GRP_Age4  +     94.2208519596052 *
53385     +        GRP_TotalArea2  +  1.0000000133514E-10 * GRP_TotalArea3
53386     +          +  9.9998231917197E-11 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H13 = 159.41309684645 * GRP_Age2 + 235.223316073762 * GRP_Age3 + 155.697624338212 * GRP_Age4 + 94.2208519596052 * GRP_TotalArea2 + 1.0000000133514E-10 * GRP_TotalArea3 + 9.9998231917197E-11 * GRP_TotalArea4 ;
53387     +   H11  =    -4.97510380635433 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -4.97510380635433 + H11 ;
53388     +   H12  =     9.28190669399731 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 9.28190669399731 + H12 ;
53389     +   H13  =     79.4398612902139 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 79.4398612902139 + H13 ;
53390     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
53391     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
53392     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
53393     +END;
MPRINT(EM_DIAGRAM):   END;
53394     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53395     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
53396     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
53397     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
53398     +END;
MPRINT(EM_DIAGRAM):   END;
53399     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53400     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
53401     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53402     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53403     +   P_SalePrice  =     3332.63686904079 * H11  +      1881.5492640311 * H12
53404     +          +    -2843.75668761685 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 3332.63686904079 * H11 + 1881.5492640311 * H12 + -2843.75668761685 * H13 ;
53405     +   P_SalePrice  =     76533.1360629322 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76533.1360629322 + P_SalePrice ;
53406     +END;
MPRINT(EM_DIAGRAM):   END;
53407     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53408     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
53409     +END;
MPRINT(EM_DIAGRAM):   END;
53410     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
53411     +   P_SalePrice  =     76154.1162790697;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76154.1162790697;
53412     +END;
MPRINT(EM_DIAGRAM):   END;
53413     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
53414     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
53415     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
53416     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
53417     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
53418     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53419     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
53420     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53421     +drop
53422     +H11
53423     +H12
53424     +H13
53425     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
53426      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.28 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
53427      quit;
53428      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
53429      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53430      *------------------------------------------------------------*;
53431      * Neural2: Scoring VALIDATE data;
53432      *------------------------------------------------------------*;
53433      data EMWS1.Neural2_VALIDATE
53434      / view=EMWS1.Neural2_VALIDATE
53435      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_VALIDATE / view=EMWS1.Neural2_VALIDATE ;
53436      set EMWS1.BINNING_VALIDATE
53437      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_VALIDATE ;
53438      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
53439     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53440     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
53441     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53442     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
53443     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
53444     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
53445     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
53446     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
53447     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
53448     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
53449     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
53450     +LENGTH _WARN_ $4
53451     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
53452     +      label GRP_Age2 = 'Dummy: GRP_Age=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Age2 = 'Dummy: GRP_Age=2' ;
53453     +
53454     +      label GRP_Age3 = 'Dummy: GRP_Age=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Age3 = 'Dummy: GRP_Age=3' ;
53455     +
53456     +      label GRP_Age4 = 'Dummy: GRP_Age=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Age4 = 'Dummy: GRP_Age=4' ;
53457     +
53458     +      label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
53459     +
53460     +      label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
53461     +
53462     +      label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
53463     +
53464     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
53465     +
53466     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
53467     +
53468     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
53469     +
53470     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
53471     +
53472     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
53473     +
53474     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
53475     +
53476     +*** Generate dummy variables for GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Age ;
53477     +drop GRP_Age2 GRP_Age3 GRP_Age4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Age2 GRP_Age3 GRP_Age4 ;
53478     +if missing( GRP_Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Age ) then do;
53479     +   GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53480     +   GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53481     +   GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53482     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53483     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53484     +end;
MPRINT(EM_DIAGRAM):   end;
53485     +else do;
MPRINT(EM_DIAGRAM):   else do;
53486     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53487     +   _dm12 = put( GRP_Age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Age , BEST12. );
53488     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53489     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53490     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53491     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53492     +      GRP_Age4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = 0.63245553203367;
53493     +   end;
MPRINT(EM_DIAGRAM):   end;
53494     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53495     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53496     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53497     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53498     +   end;
MPRINT(EM_DIAGRAM):   end;
53499     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53500     +      GRP_Age2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = -0.63245553203367;
53501     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53502     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53503     +   end;
MPRINT(EM_DIAGRAM):   end;
53504     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53505     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53506     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53507     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53508     +   end;
MPRINT(EM_DIAGRAM):   end;
53509     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53510     +      GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53511     +      GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53512     +      GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53513     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53514     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53515     +   end;
MPRINT(EM_DIAGRAM):   end;
53516     +end;
MPRINT(EM_DIAGRAM):   end;
53517     +
53518     +*** Generate dummy variables for GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_TotalArea ;
53519     +drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
53520     +if missing( GRP_TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_TotalArea ) then do;
53521     +   GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53522     +   GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53523     +   GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53524     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53525     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53526     +end;
MPRINT(EM_DIAGRAM):   end;
53527     +else do;
MPRINT(EM_DIAGRAM):   else do;
53528     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53529     +   _dm12 = put( GRP_TotalArea , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_TotalArea , BEST12. );
53530     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53531     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53532     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53533     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53534     +      GRP_TotalArea4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = 0.63245553203367;
53535     +   end;
MPRINT(EM_DIAGRAM):   end;
53536     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53537     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53538     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53539     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53540     +   end;
MPRINT(EM_DIAGRAM):   end;
53541     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53542     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53543     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53544     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53545     +   end;
MPRINT(EM_DIAGRAM):   end;
53546     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53547     +      GRP_TotalArea2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = -0.63245553203367;
53548     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53549     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53550     +   end;
MPRINT(EM_DIAGRAM):   end;
53551     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53552     +      GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53553     +      GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53554     +      GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53555     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53556     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53557     +   end;
MPRINT(EM_DIAGRAM):   end;
53558     +end;
MPRINT(EM_DIAGRAM):   end;
53559     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53560     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
53561     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53562     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53563     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
53564     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53565     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53566     +   H11  =  1.0000000827403E-10 * GRP_Age2  +  1.0000000827403E-10 * GRP_Age3
53567     +          +     18.9559961302211 * GRP_Age4  +  1.0000000827403E-10 *
53568     +        GRP_TotalArea2  +     14.7725771784866 * GRP_TotalArea3
53569     +          +      82.296259261635 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H11 = 1.0000000827403E-10 * GRP_Age2 + 1.0000000827403E-10 * GRP_Age3 + 18.9559961302211 * GRP_Age4 + 1.0000000827403E-10 * GRP_TotalArea2 + 14.7725771784866 * GRP_TotalArea3 + 82.296259261635 * GRP_TotalArea4 ;
53570     +   H12  =     3.15340711708705 * GRP_Age2  +      7.7019890208257 * GRP_Age3
53571     +          +  1.0000000827403E-10 * GRP_Age4  +     19.1423937009409 *
53572     +        GRP_TotalArea2  +  1.0000000827403E-10 * GRP_TotalArea3
53573     +          +     16.0556035718679 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H12 = 3.15340711708705 * GRP_Age2 + 7.7019890208257 * GRP_Age3 + 1.0000000827403E-10 * GRP_Age4 + 19.1423937009409 * GRP_TotalArea2 + 1.0000000827403E-10 * GRP_TotalArea3 + 16.0556035718679 * GRP_TotalArea4 ;
53574     +   H13  =      159.41309684645 * GRP_Age2  +     235.223316073762 * GRP_Age3
53575     +          +     155.697624338212 * GRP_Age4  +     94.2208519596052 *
53576     +        GRP_TotalArea2  +  1.0000000133514E-10 * GRP_TotalArea3
53577     +          +  9.9998231917197E-11 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H13 = 159.41309684645 * GRP_Age2 + 235.223316073762 * GRP_Age3 + 155.697624338212 * GRP_Age4 + 94.2208519596052 * GRP_TotalArea2 + 1.0000000133514E-10 * GRP_TotalArea3 + 9.9998231917197E-11 * GRP_TotalArea4 ;
53578     +   H11  =    -4.97510380635433 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -4.97510380635433 + H11 ;
53579     +   H12  =     9.28190669399731 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 9.28190669399731 + H12 ;
53580     +   H13  =     79.4398612902139 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 79.4398612902139 + H13 ;
53581     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
53582     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
53583     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
53584     +END;
MPRINT(EM_DIAGRAM):   END;
53585     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53586     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
53587     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
53588     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
53589     +END;
MPRINT(EM_DIAGRAM):   END;
53590     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53591     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
53592     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53593     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53594     +   P_SalePrice  =     3332.63686904079 * H11  +      1881.5492640311 * H12
53595     +          +    -2843.75668761685 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 3332.63686904079 * H11 + 1881.5492640311 * H12 + -2843.75668761685 * H13 ;
53596     +   P_SalePrice  =     76533.1360629322 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76533.1360629322 + P_SalePrice ;
53597     +END;
MPRINT(EM_DIAGRAM):   END;
53598     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53599     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
53600     +END;
MPRINT(EM_DIAGRAM):   END;
53601     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
53602     +   P_SalePrice  =     76154.1162790697;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76154.1162790697;
53603     +END;
MPRINT(EM_DIAGRAM):   END;
53604     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
53605     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
53606     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
53607     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
53608     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
53609     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53610     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
53611     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53612     +drop
53613     +H11
53614     +H12
53615     +H13
53616     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
53617      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.28 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
53618      quit;
53619      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
53620      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
53621      *------------------------------------------------------------*;
53622      * Neural2: Scoring TEST data;
53623      *------------------------------------------------------------*;
53624      data EMWS1.Neural2_TEST
53625      / view=EMWS1.Neural2_TEST
53626      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TEST / view=EMWS1.Neural2_TEST ;
53627      set EMWS1.BINNING_TEST
53628      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TEST ;
53629      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
53630     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53631     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
53632     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
53633     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
53634     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
53635     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
53636     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
53637     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
53638     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
53639     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
53640     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
53641     +LENGTH _WARN_ $4
53642     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
53643     +      label GRP_Age2 = 'Dummy: GRP_Age=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Age2 = 'Dummy: GRP_Age=2' ;
53644     +
53645     +      label GRP_Age3 = 'Dummy: GRP_Age=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Age3 = 'Dummy: GRP_Age=3' ;
53646     +
53647     +      label GRP_Age4 = 'Dummy: GRP_Age=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Age4 = 'Dummy: GRP_Age=4' ;
53648     +
53649     +      label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea2 = 'Dummy: GRP_TotalArea=2' ;
53650     +
53651     +      label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea3 = 'Dummy: GRP_TotalArea=3' ;
53652     +
53653     +      label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
MPRINT(EM_DIAGRAM):   label GRP_TotalArea4 = 'Dummy: GRP_TotalArea=4' ;
53654     +
53655     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
53656     +
53657     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
53658     +
53659     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
53660     +
53661     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
53662     +
53663     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
53664     +
53665     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
53666     +
53667     +*** Generate dummy variables for GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Age ;
53668     +drop GRP_Age2 GRP_Age3 GRP_Age4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Age2 GRP_Age3 GRP_Age4 ;
53669     +if missing( GRP_Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Age ) then do;
53670     +   GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53671     +   GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53672     +   GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53673     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53674     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53675     +end;
MPRINT(EM_DIAGRAM):   end;
53676     +else do;
MPRINT(EM_DIAGRAM):   else do;
53677     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53678     +   _dm12 = put( GRP_Age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Age , BEST12. );
53679     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53680     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53681     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53682     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53683     +      GRP_Age4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = 0.63245553203367;
53684     +   end;
MPRINT(EM_DIAGRAM):   end;
53685     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53686     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53687     +      GRP_Age3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = 0.63245553203367;
53688     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53689     +   end;
MPRINT(EM_DIAGRAM):   end;
53690     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53691     +      GRP_Age2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = -0.63245553203367;
53692     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53693     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53694     +   end;
MPRINT(EM_DIAGRAM):   end;
53695     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53696     +      GRP_Age2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age2 = 0.63245553203367;
53697     +      GRP_Age3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age3 = -0.63245553203367;
53698     +      GRP_Age4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_Age4 = -0.63245553203367;
53699     +   end;
MPRINT(EM_DIAGRAM):   end;
53700     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53701     +      GRP_Age2 = .;
MPRINT(EM_DIAGRAM):   GRP_Age2 = .;
53702     +      GRP_Age3 = .;
MPRINT(EM_DIAGRAM):   GRP_Age3 = .;
53703     +      GRP_Age4 = .;
MPRINT(EM_DIAGRAM):   GRP_Age4 = .;
53704     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53705     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53706     +   end;
MPRINT(EM_DIAGRAM):   end;
53707     +end;
MPRINT(EM_DIAGRAM):   end;
53708     +
53709     +*** Generate dummy variables for GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_TotalArea ;
53710     +drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   drop GRP_TotalArea2 GRP_TotalArea3 GRP_TotalArea4 ;
53711     +if missing( GRP_TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_TotalArea ) then do;
53712     +   GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53713     +   GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53714     +   GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53715     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
53716     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53717     +end;
MPRINT(EM_DIAGRAM):   end;
53718     +else do;
MPRINT(EM_DIAGRAM):   else do;
53719     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
53720     +   _dm12 = put( GRP_TotalArea , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_TotalArea , BEST12. );
53721     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
53722     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
53723     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53724     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53725     +      GRP_TotalArea4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = 0.63245553203367;
53726     +   end;
MPRINT(EM_DIAGRAM):   end;
53727     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
53728     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53729     +      GRP_TotalArea3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = 0.63245553203367;
53730     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53731     +   end;
MPRINT(EM_DIAGRAM):   end;
53732     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
53733     +      GRP_TotalArea2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = 0.63245553203367;
53734     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53735     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53736     +   end;
MPRINT(EM_DIAGRAM):   end;
53737     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
53738     +      GRP_TotalArea2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = -0.63245553203367;
53739     +      GRP_TotalArea3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = -0.63245553203367;
53740     +      GRP_TotalArea4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = -0.63245553203367;
53741     +   end;
MPRINT(EM_DIAGRAM):   end;
53742     +   else do;
MPRINT(EM_DIAGRAM):   else do;
53743     +      GRP_TotalArea2 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea2 = .;
53744     +      GRP_TotalArea3 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea3 = .;
53745     +      GRP_TotalArea4 = .;
MPRINT(EM_DIAGRAM):   GRP_TotalArea4 = .;
53746     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
53747     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
53748     +   end;
MPRINT(EM_DIAGRAM):   end;
53749     +end;
MPRINT(EM_DIAGRAM):   end;
53750     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53751     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
53752     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53753     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53754     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
53755     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53756     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53757     +   H11  =  1.0000000827403E-10 * GRP_Age2  +  1.0000000827403E-10 * GRP_Age3
53758     +          +     18.9559961302211 * GRP_Age4  +  1.0000000827403E-10 *
53759     +        GRP_TotalArea2  +     14.7725771784866 * GRP_TotalArea3
53760     +          +      82.296259261635 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H11 = 1.0000000827403E-10 * GRP_Age2 + 1.0000000827403E-10 * GRP_Age3 + 18.9559961302211 * GRP_Age4 + 1.0000000827403E-10 * GRP_TotalArea2 + 14.7725771784866 * GRP_TotalArea3 + 82.296259261635 * GRP_TotalArea4 ;
53761     +   H12  =     3.15340711708705 * GRP_Age2  +      7.7019890208257 * GRP_Age3
53762     +          +  1.0000000827403E-10 * GRP_Age4  +     19.1423937009409 *
53763     +        GRP_TotalArea2  +  1.0000000827403E-10 * GRP_TotalArea3
53764     +          +     16.0556035718679 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H12 = 3.15340711708705 * GRP_Age2 + 7.7019890208257 * GRP_Age3 + 1.0000000827403E-10 * GRP_Age4 + 19.1423937009409 * GRP_TotalArea2 + 1.0000000827403E-10 * GRP_TotalArea3 + 16.0556035718679 * GRP_TotalArea4 ;
53765     +   H13  =      159.41309684645 * GRP_Age2  +     235.223316073762 * GRP_Age3
53766     +          +     155.697624338212 * GRP_Age4  +     94.2208519596052 *
53767     +        GRP_TotalArea2  +  1.0000000133514E-10 * GRP_TotalArea3
53768     +          +  9.9998231917197E-11 * GRP_TotalArea4 ;
MPRINT(EM_DIAGRAM):   H13 = 159.41309684645 * GRP_Age2 + 235.223316073762 * GRP_Age3 + 155.697624338212 * GRP_Age4 + 94.2208519596052 * GRP_TotalArea2 + 1.0000000133514E-10 * GRP_TotalArea3 + 9.9998231917197E-11 * GRP_TotalArea4 ;
53769     +   H11  =    -4.97510380635433 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -4.97510380635433 + H11 ;
53770     +   H12  =     9.28190669399731 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 9.28190669399731 + H12 ;
53771     +   H13  =     79.4398612902139 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 79.4398612902139 + H13 ;
53772     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
53773     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
53774     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
53775     +END;
MPRINT(EM_DIAGRAM):   END;
53776     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53777     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
53778     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
53779     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
53780     +END;
MPRINT(EM_DIAGRAM):   END;
53781     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53782     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
53783     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
53784     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
53785     +   P_SalePrice  =     3332.63686904079 * H11  +      1881.5492640311 * H12
53786     +          +    -2843.75668761685 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 3332.63686904079 * H11 + 1881.5492640311 * H12 + -2843.75668761685 * H13 ;
53787     +   P_SalePrice  =     76533.1360629322 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76533.1360629322 + P_SalePrice ;
53788     +END;
MPRINT(EM_DIAGRAM):   END;
53789     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
53790     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
53791     +END;
MPRINT(EM_DIAGRAM):   END;
53792     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
53793     +   P_SalePrice  =     76154.1162790697;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76154.1162790697;
53794     +END;
MPRINT(EM_DIAGRAM):   END;
53795     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
53796     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
53797     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
53798     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
53799     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
53800     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53801     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
53802     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
53803     +drop
53804     +H11
53805     +H12
53806     +H13
53807     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
53808      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.29 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.31 seconds
      cpu time            0.32 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
53809      quit;
53810      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
53811      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
53812      * Neural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural2: Computing metadata for TRAIN data;
53813      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.35 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural2_TRAIN out=WORK.M23AN8U6 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23AN8U6;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M23AN8U6(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23AN8U6;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M23AN8U6;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M01ICR3S NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2JH3A8O(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   set WORK.M01ICR3S;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "Neural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
54140      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMINFO;
54141      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
54142      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
54143      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
54147      run;
54148      proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
54149      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
54150      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.22 seconds
 
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: View EMWS1.NEURAL2_TEST.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 17, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 17, 2015
Time:                14:23:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O07P0U_P "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O07P0U_P new;
MPRINT(EM_DIAGRAM):   run;
54174      data EMWS1.Neural2_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMOUTFIT(rename=(_NAME_=TARGET));
54175      set EMWS1.Neural2_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTFIT(where=(_NAME_ eq 'OVERALL'));
54176      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
54177      if _NAME_='OVERALL' then _NAME_='SalePrice';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='SalePrice';
54178      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
54179      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54180      proc sort data=EMWS1.Neural2_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_EMOUTFIT nodupkey;
54181      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
54182      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 58 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54183      data EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMOUTFIT;
54184      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
54185      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
54186      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
54187      if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
54188      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54189      proc sort data=EMWS1.Neural2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_EMREPORTFIT nothreads;
54190      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
54191      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL2_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54192      %let _EMwarndup = 0;
54193      %let _EMtargetdup =;
54194      %let _EMASEtargetdup =;
54195      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
54196      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
54197      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
54198      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
54199      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
54200      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
54201      end;
MPRINT(EM_DIAGRAM):   end;
54202      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
54203      proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
54204      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
54205      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 17 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54206      proc sort data=EMWS1.Neural2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
54207      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
54208      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.NEURAL2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
54209      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
54210      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
54211      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
54212      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 15 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54213      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
54214      set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
54215      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
54216      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
54217      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
54218      set EMWS1.Neural2_TRAIN(keep=
54219      P_SalePrice
54220      R_SalePrice
54221      _WARN_
54222      SalePrice
54223      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_TRAIN(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
54224      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 145 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.FILTER_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.26 seconds
 
NOTE: There were 129 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 129 observations read from the data set EMWS1.NEURAL2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 129 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.29 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural2: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural2_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Neural2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Neural2BOXDATA out=WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Neural2BOXDATA out=WORK.Neural2BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Neural2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "TRAIN" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 68475.21166) / 805.7933612), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 129);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 84591.078884;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 805.7933612;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
58539      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
58540      set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
58541      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
58542      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
58543      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
58544      set EMWS1.Neural2_VALIDATE(keep=
58545      P_SalePrice
58546      R_SalePrice
58547      _WARN_
58548      SalePrice
58549      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VALIDATE(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
58550      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 109 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.FILTER_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.34 seconds
 
NOTE: There were 109 observations read from the data set EMWS1.BINNING_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.NEURAL2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 109 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.37 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural2: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural2_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Neural2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Neural2BOXDATA out=WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Neural2BOXDATA out=WORK.Neural2BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Neural2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRESIDUAL WORK.Neural2BOXDATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "VALIDATE" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 68475.21166) / 805.7933612), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 109);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 84591.078884;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 805.7933612;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length P_LABEL $27;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
62875      %let _cn = %sysfunc(getoption(CENTER));
62876      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
62877      proc print data=EMWS1.Neural2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMREPORTFIT noobs label;
62878      var STAT LABEL TRAIN
62879      VALIDATE
62880      TEST
62881      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
62882      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
62883      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62884      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
62885      run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62886      title10;
MPRINT(EM_DIAGRAM):   title10;
62887      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
62888      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
62889      modify Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
62890      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
62891      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
62892      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL2_EMRANK.DATA.
62893      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
62894      %let _cn = %sysfunc(getoption(CENTER));
62895      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
62896      proc print data=EMWS1.Neural2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMRANK label noobs;
62897      var
62898      decile N _targetMean_ _meanP_;
MPRINT(EM_DIAGRAM):   var decile N _targetMean_ _meanP_;
62899      by
62900      notsorted DATAROLE
62901      notsorted TARGET
62902      notsorted TARGETLABEL
62903      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
62904      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62905      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
62906      run;
 
NOTE: There were 15 observations read from the data set EMWS1.NEURAL2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
62907      title10;
MPRINT(EM_DIAGRAM):   title10;
62908      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
62909      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
62910      modify Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
62911      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
62912      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
62913      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL2_EMSCOREDIST.DATA.
62914      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label _targetMean_ _meanp_ n score;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "SalePrice" );
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
