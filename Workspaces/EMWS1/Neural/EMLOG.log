*------------------------------------------------------------*
User:                bteric01
Date:                November 16, 2015
Time:                14:09:58
Site:                70080760
Platform:            X64_7PRO
Maintenance Release: 9.04.01M1P120413
EM Version:          13.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 16, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:42" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 16, 2015
Time:                14:09:42
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3KBR2X4 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3KBR2X4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 16, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:42" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 16, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:42" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21063      proc freq data=EMWS1.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural_VariableSet noprint;
21064      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
21065      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21066      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
21067      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21068      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21069      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21070      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21071      run;
 
NOTE: There were 4 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
21072      title10;
MPRINT(EM_DIAGRAM):   title10;
21073      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='SalePrice'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL='SalePrice'
                         FORMAT='BEST.'
                         INFORMAT=''
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[16331]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Part_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Neural_SalePrice_DD(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Determine decision variables for SalePrice;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Neural_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN;
MPRINT(EM_DIAGRAM):   keep SalePrice;
MPRINT(EM_DIAGRAM):   keep 'P_SalePrice'n;
MPRINT(EM_DIAGRAM):   'P_SalePrice'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_SalePrice_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
"No decisions defined for target "SalePrice"."
21134      proc print data = EMWS1.Neural_SalePrice_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural_SalePrice_DM noobs label;
21135      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
21136      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
21137      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
21138      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21139      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
21140      run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_SALEPRICE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
21141      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1ZBJWA9;
MPRINT(EM_DIAGRAM):   set WORK.M1ZBJWA9;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
21151      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21152      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
21153      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21154      data WORK.SalePrice(label="SalePrice");
MPRINT(EM_DIAGRAM):   data WORK.SalePrice(label="SalePrice");
21155        length   SalePrice                            8
21156                 ;
MPRINT(EM_DIAGRAM):   length SalePrice 8 ;
21157
21158        label    SalePrice="SalePrice"
21159                 ;
MPRINT(EM_DIAGRAM):   label SalePrice= "SalePrice" ;
21160       SalePrice=5014;
MPRINT(EM_DIAGRAM):   SalePrice=5014;
21161      output;
MPRINT(EM_DIAGRAM):   output;
21162       SalePrice=121984;
MPRINT(EM_DIAGRAM):   SalePrice=121984;
21163      output;
MPRINT(EM_DIAGRAM):   output;
21164       SalePrice=76715.8;
MPRINT(EM_DIAGRAM):   SalePrice=76715.8;
21165      output;
MPRINT(EM_DIAGRAM):   output;
21166      ;
MPRINT(EM_DIAGRAM):   ;
21167      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21168      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
21169      modify SalePrice(type=PROFIT label=SalePrice);
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
21170      run;
 
NOTE: MODIFY was successful for WORK.SALEPRICE.DATA.
21171      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21172      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
21173      set EMWS1.Part_TRAIN(keep=
21174      Age Basement BasementType Baths CentralAir ConstructionType FirePlace
21175      FirstFloor GarageSize GarageType LotSize Neighborhood SalePrice SecondFloor
21176      TotalArea UpperArea WallType);
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN(keep= Age Basement BasementType Baths CentralAir ConstructionType FirePlace FirstFloor GarageSize GarageType LotSize Neighborhood SalePrice SecondFloor TotalArea UpperArea WallType);
21177      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 145 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 145 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21178      *------------------------------------------------------------* ;
21179      * Neural: DMDBClass Macro ;
21180      *------------------------------------------------------------* ;
21181      %macro DMDBClass;
21182          BasementType(ASC) CentralAir(ASC) ConstructionType(ASC) GarageType(ASC)
21183         LotSize(ASC) Neighborhood(ASC) WallType(ASC)
21184      %mend DMDBClass;
21185      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21186      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
21187      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21188      %macro DMDBVar;
21189          Age Basement Baths FirePlace FirstFloor GarageSize SalePrice SecondFloor
21190         TotalArea UpperArea
21191      %mend DMDBVar;
21192      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21193      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
21194      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21195      proc dmdb batch data=WORK.EM_Neural
21196      dmdbcat=WORK.Neural_DMDB
21197      maxlevel = 513
21198      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
21199      class %DMDBClass;
MPRINT(DMDBCLASS):   BasementType(ASC) CentralAir(ASC) ConstructionType(ASC) GarageType(ASC) LotSize(ASC) Neighborhood(ASC) WallType(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
21200      var %DMDBVar;
MPRINT(DMDBVAR):   Age Basement Baths FirePlace FirstFloor GarageSize SalePrice SecondFloor TotalArea UpperArea
MPRINT(EM_DIAGRAM):  ;
21201      target
21202      SalePrice
21203      ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
21204      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 145   Memory used = 511K.
NOTE: There were 145 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
21205      quit;
21206      *--- end code ---*;
 
21207      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
21208      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
21209      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21210      %macro INTINPUTS;
21211          Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea
21212         UpperArea
21213      %mend INTINPUTS;
21214      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21215      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
21216      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21217      %macro BININPUTS;
21218          CentralAir
21219      %mend BININPUTS;
21220      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21221      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
21222      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21223      %macro NOMINPUTS;
21224          BasementType ConstructionType GarageType LotSize Neighborhood WallType
21225      %mend NOMINPUTS;
21226      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21227      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
21228      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21229      %macro ORDINPUTS;
21230
21231      %mend ORDINPUTS;
21232      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21233      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
21234      ;
MPRINT(EM_DIAGRAM):   ;
21235      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21236      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
21237      validdata = EMWS1.Part_VALIDATE
21238      random=12345
21239      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata = EMWS1.Part_VALIDATE random=12345 ;
21240      nloptions
21241      ;
MPRINT(EM_DIAGRAM):   nloptions ;
21242      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
21243      netopts
21244      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
21245      input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea UpperArea
21246      ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
21247      input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   CentralAir
21248      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
21249      input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   BasementType ConstructionType GarageType LotSize Neighborhood WallType
21250      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
21251      target
21252      SalePrice
21253      / level=interval id=intervalTargets
21254      bias
21255      ;
MPRINT(EM_DIAGRAM):   target SalePrice / level=interval id=intervalTargets bias ;
21256      arch MLP
21257      Hidden=3
21258      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
21259      Prelim 5 preiter=10
21260      pretime=3600
21261      Outest=EMWS1.Neural_PRELIM_OUTEST
21262      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS1.Neural_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS1.NEURAL_PRELIM_OUTEST has 11 observations and 91 variables.
21263      save network=EMWS1.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural_NETWORK.dm_neural;
NOTE: Creating a new Catalogue with entry EMWS1.NEURAL_NETWORK.DM_NEURAL.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
21264      train Maxiter=50
21265      maxtime=14400
21266      Outest=EMWS1.Neural_outest estiter=1
21267      Outfit=EMWS1.Neural_OUTFIT
21268      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS1.Neural_outest estiter=1 Outfit=EMWS1.Neural_OUTFIT ;
NOTE: Convergence criterion (FCONV=0.0001) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: The data set EMWS1.NEURAL_OUTEST has 129 observations and 91 variables.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 104 observations and 36 variables.
21269      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 145 observations and 17 variables.
NOTE: The data set EMWS1.PART_VALIDATE has 109 observations and 18 variables.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 3-6.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           5.51 seconds
      cpu time            1.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21270      quit;
 
21271      proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
21272      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
21273      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21274      %GLOBAL ITER;
21275      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
21276      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
21277      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
21278      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21279      data EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_INITIAL;
21280      set EMWS1.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest(where=(_ITER_ eq 0 and _OBJ_ ne .));
21281      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTEST.
      WHERE (_ITER_=0) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 91 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21282      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21283      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
21284      ;
MPRINT(EM_DIAGRAM):   ;
21285      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21286      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
21287      validdata = EMWS1.Part_VALIDATE
21288      network = EMWS1.Neural_NETWORK.dm_neural
21289      random=12345
21290      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata = EMWS1.Part_VALIDATE network = EMWS1.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
21291      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
21292      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
21293      initial inest=EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural_INITIAL;
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 91 variables.
21294      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
21295      code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\SCORECODE.sas"
21296      group=Neural
21297      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\SCORECODE.sas" group=Neural ;
NOTE: External file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\SCORECODE.sas opened.
21298      ;
MPRINT(EM_DIAGRAM):   ;
21299      code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas"
21300      group=Neural
21301      residual
21302      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas" group=Neural residual ;
NOTE: External file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas opened.
21303      ;
MPRINT(EM_DIAGRAM):   ;
21304      score data=EMWS1.Part_TRAIN out=_NULL_
21305      outfit=WORK.FIT1
21306      role=TRAIN
21307      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Part_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 30 observations and 8 variables.
NOTE: The data set EMWS1.PART_TRAIN has 145 observations and 18 variables.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
21308      score data=EMWS1.Part_VALIDATE out=_NULL_
21309      outfit=WORK.FIT2
21310      role=VALID
21311      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Part_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 30 observations and 8 variables.
NOTE: The data set EMWS1.PART_VALIDATE has 109 observations and 18 variables.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
21312      score data=EMWS1.Part_TEST out=_NULL_
21313      outfit=WORK.FIT3
21314      role=TEST
21315      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Part_TEST out=_NULL_ outfit=WORK.FIT3 role=TEST outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 30 observations and 8 variables.
NOTE: The data set EMWS1.PART_TEST has 109 observations and 18 variables.
NOTE: The data set WORK.FIT3 has 2 observations and 25 variables.
21316      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 145 observations and 17 variables.
NOTE: The data set EMWS1.PART_VALIDATE has 109 observations and 18 variables.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21317      quit;
21318      data EMWS1.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_OUTFIT;
21319      merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
21320      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: There were 2 observations read from the data set WORK.FIT3.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 2 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21321      data EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMESTIMATE;
21322      set EMWS1.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest;
21323      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
21324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 129 observations read from the data set EMWS1.NEURAL_OUTEST.
NOTE: The data set EMWS1.NEURAL_EMESTIMATE has 52 observations and 91 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
21325      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
21326      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
21327      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
21328      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21329      data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
21330      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
21331      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
21332      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
21333      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21334      proc sort data=EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_PLOTDS;
21335      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
21336      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21337      data EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_PLOTDS;
21338      set EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_PLOTDS;
21339      drop _MISC_;
MPRINT(EM_DIAGRAM):   drop _MISC_;
21340      drop _WRONG_;
MPRINT(EM_DIAGRAM):   drop _WRONG_;
21341      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21342      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 0) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 0) );
21343      set EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE;
21344      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 83 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21345      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
21346      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
21347      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 83 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21348      proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
21349      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
21350      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 81 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21351      data EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_WEIGHTDS;
21352      set EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS;
21353      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
21354      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
21355      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
21356      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
21357      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
21358         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
21359      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
21360      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 81 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 76 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21361      proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
21362      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
21363      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 76 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 76 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 16, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:52" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 16, 2015
Time:                14:09:52
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O37HFB44 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O37HFB44 new;
MPRINT(EM_DIAGRAM):   run;
21465      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
21466      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
21467      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
21468      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21469      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21470      *------------------------------------------------------------*;
21471      * Neural: Scoring DATA data;
21472      *------------------------------------------------------------*;
21473      data EMWS1.Neural_TRAIN
21474      / view=EMWS1.Neural_TRAIN
21475      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
21476      set EMWS1.Part_TRAIN
21477      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN ;
21478      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
21479     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21480     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
21481     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21482     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
21483     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
21484     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
21485     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
21486     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
21487     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
21488     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
21489     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
21490     +LENGTH _WARN_ $4
21491     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
21492     +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
21493     +
21494     +      label S_Basement = 'Standard: Basement' ;
MPRINT(EM_DIAGRAM):   label S_Basement = 'Standard: Basement' ;
21495     +
21496     +      label S_Baths = 'Standard: Baths' ;
MPRINT(EM_DIAGRAM):   label S_Baths = 'Standard: Baths' ;
21497     +
21498     +      label S_FirePlace = 'Standard: FirePlace' ;
MPRINT(EM_DIAGRAM):   label S_FirePlace = 'Standard: FirePlace' ;
21499     +
21500     +      label S_FirstFloor = 'Standard: FirstFloor' ;
MPRINT(EM_DIAGRAM):   label S_FirstFloor = 'Standard: FirstFloor' ;
21501     +
21502     +      label S_GarageSize = 'Standard: GarageSize' ;
MPRINT(EM_DIAGRAM):   label S_GarageSize = 'Standard: GarageSize' ;
21503     +
21504     +      label S_SecondFloor = 'Standard: SecondFloor' ;
MPRINT(EM_DIAGRAM):   label S_SecondFloor = 'Standard: SecondFloor' ;
21505     +
21506     +      label S_TotalArea = 'Standard: TotalArea' ;
MPRINT(EM_DIAGRAM):   label S_TotalArea = 'Standard: TotalArea' ;
21507     +
21508     +      label S_UpperArea = 'Standard: UpperArea' ;
MPRINT(EM_DIAGRAM):   label S_UpperArea = 'Standard: UpperArea' ;
21509     +
21510     +      label CentralAir0 = 'Dummy: CentralAir=0' ;
MPRINT(EM_DIAGRAM):   label CentralAir0 = 'Dummy: CentralAir=0' ;
21511     +
21512     +      label BasementType0 = 'Dummy: BasementType=0' ;
MPRINT(EM_DIAGRAM):   label BasementType0 = 'Dummy: BasementType=0' ;
21513     +
21514     +      label BasementType1 = 'Dummy: BasementType=1' ;
MPRINT(EM_DIAGRAM):   label BasementType1 = 'Dummy: BasementType=1' ;
21515     +
21516     +      label ConstructionType1 = 'Dummy: ConstructionType=1' ;
MPRINT(EM_DIAGRAM):   label ConstructionType1 = 'Dummy: ConstructionType=1' ;
21517     +
21518     +      label ConstructionType2 = 'Dummy: ConstructionType=2' ;
MPRINT(EM_DIAGRAM):   label ConstructionType2 = 'Dummy: ConstructionType=2' ;
21519     +
21520     +      label GarageType0 = 'Dummy: GarageType=0' ;
MPRINT(EM_DIAGRAM):   label GarageType0 = 'Dummy: GarageType=0' ;
21521     +
21522     +      label GarageType1 = 'Dummy: GarageType=1' ;
MPRINT(EM_DIAGRAM):   label GarageType1 = 'Dummy: GarageType=1' ;
21523     +
21524     +      label GarageType2 = 'Dummy: GarageType=2' ;
MPRINT(EM_DIAGRAM):   label GarageType2 = 'Dummy: GarageType=2' ;
21525     +
21526     +      label GarageType3 = 'Dummy: GarageType=3' ;
MPRINT(EM_DIAGRAM):   label GarageType3 = 'Dummy: GarageType=3' ;
21527     +
21528     +      label GarageType4 = 'Dummy: GarageType=4' ;
MPRINT(EM_DIAGRAM):   label GarageType4 = 'Dummy: GarageType=4' ;
21529     +
21530     +      label LotSize1 = 'Dummy: LotSize=1' ;
MPRINT(EM_DIAGRAM):   label LotSize1 = 'Dummy: LotSize=1' ;
21531     +
21532     +      label Neighborhood1 = 'Dummy: Neighborhood=1' ;
MPRINT(EM_DIAGRAM):   label Neighborhood1 = 'Dummy: Neighborhood=1' ;
21533     +
21534     +      label WallType1 = 'Dummy: WallType=1' ;
MPRINT(EM_DIAGRAM):   label WallType1 = 'Dummy: WallType=1' ;
21535     +
21536     +      label WallType2 = 'Dummy: WallType=2' ;
MPRINT(EM_DIAGRAM):   label WallType2 = 'Dummy: WallType=2' ;
21537     +
21538     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
21539     +
21540     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
21541     +
21542     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
21543     +
21544     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
21545     +
21546     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
21547     +
21548     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
21549     +
21550     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
21551     +drop CentralAir0 ;
MPRINT(EM_DIAGRAM):   drop CentralAir0 ;
21552     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
21553     +   CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
21554     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21555     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21556     +end;
MPRINT(EM_DIAGRAM):   end;
21557     +else do;
MPRINT(EM_DIAGRAM):   else do;
21558     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21559     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
21560     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21561     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   CentralAir0 = 1;
21562     +      CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   end;
21563     +   end;
21564     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
21565     +      CentralAir0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21566     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21567     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21568     +      CentralAir0 = .;
21569     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
21570     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop BasementType0 BasementType1 ;
21571     +   end;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
21572     +end;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
21573     +
MPRINT(EM_DIAGRAM):   BasementType1 = .;
21574     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21575     +drop BasementType0 BasementType1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21576     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   end;
21577     +   BasementType0 = .;
21578     +   BasementType1 = .;
MPRINT(EM_DIAGRAM):   else do;
21579     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21580     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21581     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
21582     +else do;
21583     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21584     +   _dm12 = put( BasementType , BEST. );
21585     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = -1;
MPRINT(EM_DIAGRAM):   end;
21586     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
21587     +      BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType0 = 0;
21588     +      BasementType1 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = 1;
21589     +   end;
MPRINT(EM_DIAGRAM):   end;
21590     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21591     +      BasementType0 = 0;
MPRINT(EM_DIAGRAM):   BasementType0 = 1;
21592     +      BasementType1 = 1;
MPRINT(EM_DIAGRAM):   BasementType1 = 0;
21593     +   end;
MPRINT(EM_DIAGRAM):   end;
21594     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
21595     +      BasementType0 = 1;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
21596     +      BasementType1 = 0;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
21597     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21598     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
21599     +      BasementType0 = .;
MPRINT(EM_DIAGRAM):   end;
21600     +      BasementType1 = .;
21601     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
21602     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop ConstructionType1 ConstructionType2 ;
21603     +   end;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
21604     +end;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
21605     +
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
21606     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21607     +drop ConstructionType1 ConstructionType2 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21608     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   end;
21609     +   ConstructionType1 = .;
21610     +   ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   else do;
21611     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21612     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21613     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
21614     +else do;
21615     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21616     +   _dm12 = put( ConstructionType , BEST. );
21617     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   end;
21618     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
21619     +      ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 0;
21620     +      ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 1;
21621     +   end;
MPRINT(EM_DIAGRAM):   end;
21622     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21623     +      ConstructionType1 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType1 = -1;
21624     +      ConstructionType2 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = -1;
21625     +   end;
MPRINT(EM_DIAGRAM):   end;
21626     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
21627     +      ConstructionType1 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
21628     +      ConstructionType2 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
21629     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21630     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
21631     +      ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   end;
21632     +      ConstructionType2 = .;
21633     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
21634     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
21635     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
21636     +end;
MPRINT(EM_DIAGRAM):   GarageType0 = 0;
21637     +
MPRINT(EM_DIAGRAM):   GarageType1 = 0;
21638     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   GarageType2 = 0;
21639     +drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
MPRINT(EM_DIAGRAM):   GarageType3 = 0;
21640     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   GarageType4 = 0;
21641     +GarageType0 = 0;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
21642     +GarageType1 = 0;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
21643     +GarageType2 = 0;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
21644     +GarageType3 = 0;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
21645     +GarageType4 = 0;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
21646     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
21647     +   GarageType0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21648     +   GarageType1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21649     +   GarageType2 = .;
MPRINT(EM_DIAGRAM):   end;
21650     +   GarageType3 = .;
21651     +   GarageType4 = .;
MPRINT(EM_DIAGRAM):   else do;
21652     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21653     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21654     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
21655     +else do;
21656     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21657     +   _dm12 = put( GarageType , BEST. );
21658     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   GarageType2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21659     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   GarageType0 = 1;
21660     +      GarageType2 = 1;
MPRINT(EM_DIAGRAM):   end;
21661     +   end;
21662     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   GarageType3 = 1;
21663     +      GarageType0 = 1;
MPRINT(EM_DIAGRAM):   end;
21664     +   end;
21665     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   GarageType1 = 1;
21666     +      GarageType3 = 1;
MPRINT(EM_DIAGRAM):   end;
21667     +   end;
21668     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   GarageType4 = 1;
21669     +      GarageType1 = 1;
MPRINT(EM_DIAGRAM):   end;
21670     +   end;
21671     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   GarageType0 = -1;
21672     +      GarageType4 = 1;
MPRINT(EM_DIAGRAM):   GarageType1 = -1;
21673     +   end;
MPRINT(EM_DIAGRAM):   GarageType2 = -1;
21674     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType4 = -1;
21675     +      GarageType0 = -1;
MPRINT(EM_DIAGRAM):   end;
21676     +      GarageType1 = -1;
21677     +      GarageType2 = -1;
MPRINT(EM_DIAGRAM):   else do;
21678     +      GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
21679     +      GarageType4 = -1;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
21680     +   end;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
21681     +   else do;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
21682     +      GarageType0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21683     +      GarageType1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21684     +      GarageType2 = .;
MPRINT(EM_DIAGRAM):   end;
21685     +      GarageType3 = .;
MPRINT(EM_DIAGRAM):   end;
21686     +      GarageType4 = .;
21687     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
21688     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop LotSize1 ;
21689     +   end;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
21690     +end;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
21691     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21692     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21693     +drop LotSize1 ;
MPRINT(EM_DIAGRAM):   end;
21694     +if missing( LotSize ) then do;
21695     +   LotSize1 = .;
MPRINT(EM_DIAGRAM):   else do;
21696     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21697     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21698     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
21699     +else do;
21700     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21701     +   _dm12 = put( LotSize , BEST. );
21702     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   LotSize1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21703     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   LotSize1 = -1;
21704     +      LotSize1 = 1;
MPRINT(EM_DIAGRAM):   end;
21705     +   end;
21706     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
21707     +      LotSize1 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21708     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21709     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21710     +      LotSize1 = .;
21711     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
21712     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop Neighborhood1 ;
21713     +   end;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
21714     +end;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
21715     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21716     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21717     +drop Neighborhood1 ;
MPRINT(EM_DIAGRAM):   end;
21718     +if missing( Neighborhood ) then do;
21719     +   Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   else do;
21720     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21721     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21722     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
21723     +else do;
21724     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21725     +   _dm12 = put( Neighborhood , BEST. );
21726     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
21727     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   Neighborhood1 = -1;
21728     +      Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   end;
21729     +   end;
21730     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
21731     +      Neighborhood1 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21732     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21733     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21734     +      Neighborhood1 = .;
21735     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
21736     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop WallType1 WallType2 ;
21737     +   end;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
21738     +end;
MPRINT(EM_DIAGRAM):   WallType1 = .;
21739     +
MPRINT(EM_DIAGRAM):   WallType2 = .;
21740     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21741     +drop WallType1 WallType2 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21742     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   end;
21743     +   WallType1 = .;
21744     +   WallType2 = .;
MPRINT(EM_DIAGRAM):   else do;
21745     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21746     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21747     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
21748     +else do;
21749     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21750     +   _dm12 = put( WallType , BEST. );
21751     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = 1;
MPRINT(EM_DIAGRAM):   end;
21752     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
21753     +      WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType1 = 1;
21754     +      WallType2 = 1;
MPRINT(EM_DIAGRAM):   WallType2 = 0;
21755     +   end;
MPRINT(EM_DIAGRAM):   end;
21756     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21757     +      WallType1 = 1;
MPRINT(EM_DIAGRAM):   WallType1 = -1;
21758     +      WallType2 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = -1;
21759     +   end;
MPRINT(EM_DIAGRAM):   end;
21760     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
21761     +      WallType1 = -1;
MPRINT(EM_DIAGRAM):   WallType1 = .;
21762     +      WallType2 = -1;
MPRINT(EM_DIAGRAM):   WallType2 = .;
21763     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21764     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
21765     +      WallType1 = .;
MPRINT(EM_DIAGRAM):   end;
21766     +      WallType2 = .;
21767     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** *************************;
21768     +      _DM_BAD = 1;
21769     +   end;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
21770     +end;
21771     +
21772     +*** *************************;
21773     +*** Checking missing input Interval
21774     +*** *************************;
21775     +
21776     +IF NMISS(
21777     +   Age ,
21778     +   Basement ,
21779     +   Baths ,
21780     +   FirePlace ,
MPRINT(EM_DIAGRAM):   IF NMISS( Age , Basement , Baths , FirePlace , FirstFloor , GarageSize , SecondFloor , TotalArea , UpperArea ) THEN DO;
21781     +   FirstFloor ,
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
21782     +   GarageSize ,
21783     +   SecondFloor ,
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21784     +   TotalArea ,
MPRINT(EM_DIAGRAM):   END;
21785     +   UpperArea   ) THEN DO;
MPRINT(EM_DIAGRAM):   *** *************************;
21786     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
21787     +
MPRINT(EM_DIAGRAM):   *** *************************;
21788     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
21789     +END;
MPRINT(EM_DIAGRAM):   S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
21790     +*** *************************;
MPRINT(EM_DIAGRAM):   S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
21791     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
21792     +*** *************************;
MPRINT(EM_DIAGRAM):   S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
21793     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
21794     +   S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
21795     +   S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
21796     +   S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
21797     +   S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace ;
MPRINT(EM_DIAGRAM):   S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
21798     +   S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 * FirstFloor ;
MPRINT(EM_DIAGRAM):   S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
21799     +   S_GarageSize  =    -1.91179006286296 +     1.80006207217616 * GarageSize ;
MPRINT(EM_DIAGRAM):   END;
21800     +   S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 * SecondFloor
21801     +         ;
MPRINT(EM_DIAGRAM):   ELSE DO;
21802     +   S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
21803     +   S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea ;
21804     +END;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
21805     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( Basement ) THEN S_Basement = . ;
21806     +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   ELSE S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
21807     +   ELSE S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   IF MISSING( Baths ) THEN S_Baths = . ;
21808     +   IF MISSING( Basement ) THEN S_Basement  = . ;
MPRINT(EM_DIAGRAM):   ELSE S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
21809     +   ELSE S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirePlace ) THEN S_FirePlace = . ;
21810     +   IF MISSING( Baths ) THEN S_Baths  = . ;
21811     +   ELSE S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   ELSE S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirstFloor ) THEN S_FirstFloor = . ;
21812     +   IF MISSING( FirePlace ) THEN S_FirePlace  = . ;
21813     +   ELSE S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace
MPRINT(EM_DIAGRAM):   ELSE S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
21814     +         ;
MPRINT(EM_DIAGRAM):   IF MISSING( GarageSize ) THEN S_GarageSize = . ;
21815     +   IF MISSING( FirstFloor ) THEN S_FirstFloor  = . ;
21816     +   ELSE S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 *
MPRINT(EM_DIAGRAM):   ELSE S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
21817     +        FirstFloor ;
MPRINT(EM_DIAGRAM):   IF MISSING( SecondFloor ) THEN S_SecondFloor = . ;
21818     +   IF MISSING( GarageSize ) THEN S_GarageSize  = . ;
21819     +   ELSE S_GarageSize  =    -1.91179006286296 +     1.80006207217616 *
MPRINT(EM_DIAGRAM):   ELSE S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
21820     +        GarageSize ;
MPRINT(EM_DIAGRAM):   IF MISSING( TotalArea ) THEN S_TotalArea = . ;
21821     +   IF MISSING( SecondFloor ) THEN S_SecondFloor  = . ;
21822     +   ELSE S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 *
MPRINT(EM_DIAGRAM):   ELSE S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
21823     +        SecondFloor ;
MPRINT(EM_DIAGRAM):   IF MISSING( UpperArea ) THEN S_UpperArea = . ;
21824     +   IF MISSING( TotalArea ) THEN S_TotalArea  = . ;
21825     +   ELSE S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea
MPRINT(EM_DIAGRAM):   ELSE S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
21826     +         ;
MPRINT(EM_DIAGRAM):   END;
21827     +   IF MISSING( UpperArea ) THEN S_UpperArea  = . ;
MPRINT(EM_DIAGRAM):   *** *************************;
21828     +   ELSE S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
21829     +         ;
MPRINT(EM_DIAGRAM):   *** *************************;
21830     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
21831     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
21832     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
21833     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
21834     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
21835     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
21836     +*** *************************;
21837     +*** *************************;
21838     +*** Writing the Node H1 ;
21839     +*** *************************;
21840     +IF _DM_BAD EQ 0 THEN DO;
21841     +   H11  =      1.0811253570757 * S_Age  +     1.03792758537926 * S_Basement
MPRINT(EM_DIAGRAM):   H11 = 1.0811253570757 * S_Age + 1.03792758537926 * S_Basement + -2.69045458789429 * S_Baths + -2.58989113774345 * S_FirePlace + 0.54830269811199 * S_FirstFloor + -0.60146709273223 * S_GarageSize + -3.01068259484666 * S_SecondFloor +
-1.75346426289405 * S_TotalArea + 0.1066594151471 * S_UpperArea ;
21842     +          +    -2.69045458789429 * S_Baths  +    -2.58989113774345 *
21843     +        S_FirePlace  +     0.54830269811199 * S_FirstFloor
21844     +          +    -0.60146709273223 * S_GarageSize  +    -3.01068259484666 *
21845     +        S_SecondFloor  +    -1.75346426289405 * S_TotalArea
21846     +          +      0.1066594151471 * S_UpperArea ;
21847     +   H12  =     10.6056539724815 * S_Age  +    -2.31341855571048 * S_Basement
MPRINT(EM_DIAGRAM):   H12 = 10.6056539724815 * S_Age + -2.31341855571048 * S_Basement + -5.99788787502048 * S_Baths + -7.38334355297016 * S_FirePlace + 1.05929143867278 * S_FirstFloor + -2.72023121554838 * S_GarageSize + -3.75486868145665 * S_SecondFloor
+ -0.99588977048035 * S_TotalArea + 1.76027618533929 * S_UpperArea ;
21848     +          +    -5.99788787502048 * S_Baths  +    -7.38334355297016 *
21849     +        S_FirePlace  +     1.05929143867278 * S_FirstFloor
21850     +          +    -2.72023121554838 * S_GarageSize  +    -3.75486868145665 *
21851     +        S_SecondFloor  +    -0.99588977048035 * S_TotalArea
21852     +          +     1.76027618533929 * S_UpperArea ;
21853     +   H13  =    -5.18859194462977 * S_Age  +    -0.37443474477444 * S_Basement
MPRINT(EM_DIAGRAM):   H13 = -5.18859194462977 * S_Age + -0.37443474477444 * S_Basement + -1.37099088047079 * S_Baths + -4.5197296446296 * S_FirePlace + 2.34785274542451 * S_FirstFloor + 4.91553880125009 * S_GarageSize + -5.96160235964927 * S_SecondFloor +
-0.36486914085505 * S_TotalArea + 4.36128438585689 * S_UpperArea ;
21854     +          +    -1.37099088047079 * S_Baths  +     -4.5197296446296 *
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.81926634733339 * CentralAir0 ;
21855     +        S_FirePlace  +     2.34785274542451 * S_FirstFloor
MPRINT(EM_DIAGRAM):   H12 = H12 + -4.86126336764882 * CentralAir0 ;
21856     +          +     4.91553880125009 * S_GarageSize  +    -5.96160235964927 *
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.20065363380592 * CentralAir0 ;
21857     +        S_SecondFloor  +    -0.36486914085505 * S_TotalArea
21858     +          +     4.36128438585689 * S_UpperArea ;
21859     +   H11  = H11  +     1.81926634733339 * CentralAir0 ;
21860     +   H12  = H12  +    -4.86126336764882 * CentralAir0 ;
21861     +   H13  = H13  +    -0.20065363380592 * CentralAir0 ;
21862     +   H11  = H11  +    -0.42553110742708 * BasementType0
21863     +          +     -2.8152494816675 * BasementType1  +    -2.28800421986934 *
21864     +        ConstructionType1  +    -3.68075682437434 * ConstructionType2
21865     +          +     0.66684549722599 * GarageType0  +     2.64229318877201 *
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.42553110742708 * BasementType0 + -2.8152494816675 * BasementType1 + -2.28800421986934 * ConstructionType1 + -3.68075682437434 * ConstructionType2 + 0.66684549722599 * GarageType0 + 2.64229318877201 * GarageType1 +
-4.22584793258938 * GarageType2 + -5.84767011261514 * GarageType3 + 4.95381912857559 * GarageType4 + 2.81453134363659 * LotSize1 + 0.84606045489123 * Neighborhood1 + 1.12668276015835 * WallType1 + -1.6341125215042 * WallType2 ;
21866     +        GarageType1  +    -4.22584793258938 * GarageType2
21867     +          +    -5.84767011261514 * GarageType3  +     4.95381912857559 *
21868     +        GarageType4  +     2.81453134363659 * LotSize1
21869     +          +     0.84606045489123 * Neighborhood1  +     1.12668276015835 *
21870     +        WallType1  +     -1.6341125215042 * WallType2 ;
21871     +   H12  = H12  +     0.23390059615897 * BasementType0
21872     +          +     2.37386797364588 * BasementType1  +     3.08814617928987 *
21873     +        ConstructionType1  +     0.20121260732449 * ConstructionType2
21874     +          +     0.04617179753954 * GarageType0  +    -1.55515822727314 *
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.23390059615897 * BasementType0 + 2.37386797364588 * BasementType1 + 3.08814617928987 * ConstructionType1 + 0.20121260732449 * ConstructionType2 + 0.04617179753954 * GarageType0 + -1.55515822727314 * GarageType1 +
1.59582509860167 * GarageType2 + -0.59394988854609 * GarageType3 + 0.53166320240066 * GarageType4 + -0.19668617489595 * LotSize1 + 0.74452834064345 * Neighborhood1 + -0.33856071263169 * WallType1 + 0.06345085758378 * WallType2 ;
21875     +        GarageType1  +     1.59582509860167 * GarageType2
21876     +          +    -0.59394988854609 * GarageType3  +     0.53166320240066 *
21877     +        GarageType4  +    -0.19668617489595 * LotSize1
21878     +          +     0.74452834064345 * Neighborhood1  +    -0.33856071263169 *
21879     +        WallType1  +     0.06345085758378 * WallType2 ;
21880     +   H13  = H13  +    -8.07933326269018 * BasementType0
21881     +          +     7.36156027392192 * BasementType1  +    -9.59373504486629 *
21882     +        ConstructionType1  +    -12.3677256166013 * ConstructionType2
21883     +          +     2.78825055889834 * GarageType0  +     3.79270710138806 *
MPRINT(EM_DIAGRAM):   H13 = H13 + -8.07933326269018 * BasementType0 + 7.36156027392192 * BasementType1 + -9.59373504486629 * ConstructionType1 + -12.3677256166013 * ConstructionType2 + 2.78825055889834 * GarageType0 + 3.79270710138806 * GarageType1 +
1.22833780125341 * GarageType2 + 0.29971745302098 * GarageType3 + -0.68441599424622 * GarageType4 + 2.77468836460675 * LotSize1 + -1.03164722246083 * Neighborhood1 + -5.52469784074927 * WallType1 + -3.976976433923 * WallType2 ;
21884     +        GarageType1  +     1.22833780125341 * GarageType2
MPRINT(EM_DIAGRAM):   H11 = 1.60222125420424 + H11 ;
21885     +          +     0.29971745302098 * GarageType3  +    -0.68441599424622 *
MPRINT(EM_DIAGRAM):   H12 = -2.23039981030315 + H12 ;
21886     +        GarageType4  +     2.77468836460675 * LotSize1
MPRINT(EM_DIAGRAM):   H13 = 8.3867095651232 + H13 ;
21887     +          +    -1.03164722246083 * Neighborhood1  +    -5.52469784074927 *
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
21888     +        WallType1  +      -3.976976433923 * WallType2 ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
21889     +   H11  =     1.60222125420424 + H11 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
21890     +   H12  =    -2.23039981030315 + H12 ;
MPRINT(EM_DIAGRAM):   END;
21891     +   H13  =      8.3867095651232 + H13 ;
21892     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   ELSE DO;
21893     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H11 = .;
21894     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H12 = .;
21895     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
21896     +ELSE DO;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
21897     +   H11  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
21898     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
21899     +   H13  = .;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
21900     +END;
21901     +*** *************************;
MPRINT(EM_DIAGRAM):   P_SalePrice = -6005.49431992348 * H11 + -1039.27897944343 * H12 + 2531.16212071821 * H13 ;
21902     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 77287.1480354503 + P_SalePrice ;
21903     +*** *************************;
MPRINT(EM_DIAGRAM):   END;
21904     +IF _DM_BAD EQ 0 THEN DO;
21905     +   P_SalePrice  =    -6005.49431992348 * H11  +    -1039.27897944343 * H12
MPRINT(EM_DIAGRAM):   ELSE DO;
21906     +          +     2531.16212071821 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
21907     +   P_SalePrice  =     77287.1480354503 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   END;
21908     +END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
21909     +ELSE DO;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76715.8;
MPRINT(EM_DIAGRAM):   END;
21910     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   *** *****************************;
21911     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
21912     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** ******************************;
21913     +   P_SalePrice  =              76715.8;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
21914     +END;
21915     +*** *****************************;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
21916     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   ********************************;
21917     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
21918     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   ********************************;
21919     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
21920     +********************************;
21921     +*** End Scoring Code for Neural;
21922     +********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
21923     +drop
MPRINT(EM_DIAGRAM):   drop S_:;
21924     +H11
21925     +H12
21926     +H13
21927     +;
21928     +drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
21929      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21930      quit;
21931      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21932      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21933      *------------------------------------------------------------*;
21934      * Neural: Scoring VALIDATE data;
21935      *------------------------------------------------------------*;
21936      data EMWS1.Neural_VALIDATE
21937      / view=EMWS1.Neural_VALIDATE
21938      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
21939      set EMWS1.Part_VALIDATE
21940      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_VALIDATE ;
21941      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
21942     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21943     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
21944     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21945     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
21946     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
21947     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
21948     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
21949     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
21950     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
21951     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
21952     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
21953     +LENGTH _WARN_ $4
21954     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
21955     +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
21956     +
21957     +      label S_Basement = 'Standard: Basement' ;
MPRINT(EM_DIAGRAM):   label S_Basement = 'Standard: Basement' ;
21958     +
21959     +      label S_Baths = 'Standard: Baths' ;
MPRINT(EM_DIAGRAM):   label S_Baths = 'Standard: Baths' ;
21960     +
21961     +      label S_FirePlace = 'Standard: FirePlace' ;
MPRINT(EM_DIAGRAM):   label S_FirePlace = 'Standard: FirePlace' ;
21962     +
21963     +      label S_FirstFloor = 'Standard: FirstFloor' ;
MPRINT(EM_DIAGRAM):   label S_FirstFloor = 'Standard: FirstFloor' ;
21964     +
21965     +      label S_GarageSize = 'Standard: GarageSize' ;
MPRINT(EM_DIAGRAM):   label S_GarageSize = 'Standard: GarageSize' ;
21966     +
21967     +      label S_SecondFloor = 'Standard: SecondFloor' ;
MPRINT(EM_DIAGRAM):   label S_SecondFloor = 'Standard: SecondFloor' ;
21968     +
21969     +      label S_TotalArea = 'Standard: TotalArea' ;
MPRINT(EM_DIAGRAM):   label S_TotalArea = 'Standard: TotalArea' ;
21970     +
21971     +      label S_UpperArea = 'Standard: UpperArea' ;
MPRINT(EM_DIAGRAM):   label S_UpperArea = 'Standard: UpperArea' ;
21972     +
21973     +      label CentralAir0 = 'Dummy: CentralAir=0' ;
MPRINT(EM_DIAGRAM):   label CentralAir0 = 'Dummy: CentralAir=0' ;
21974     +
21975     +      label BasementType0 = 'Dummy: BasementType=0' ;
MPRINT(EM_DIAGRAM):   label BasementType0 = 'Dummy: BasementType=0' ;
21976     +
21977     +      label BasementType1 = 'Dummy: BasementType=1' ;
MPRINT(EM_DIAGRAM):   label BasementType1 = 'Dummy: BasementType=1' ;
21978     +
21979     +      label ConstructionType1 = 'Dummy: ConstructionType=1' ;
MPRINT(EM_DIAGRAM):   label ConstructionType1 = 'Dummy: ConstructionType=1' ;
21980     +
21981     +      label ConstructionType2 = 'Dummy: ConstructionType=2' ;
MPRINT(EM_DIAGRAM):   label ConstructionType2 = 'Dummy: ConstructionType=2' ;
21982     +
21983     +      label GarageType0 = 'Dummy: GarageType=0' ;
MPRINT(EM_DIAGRAM):   label GarageType0 = 'Dummy: GarageType=0' ;
21984     +
21985     +      label GarageType1 = 'Dummy: GarageType=1' ;
MPRINT(EM_DIAGRAM):   label GarageType1 = 'Dummy: GarageType=1' ;
21986     +
21987     +      label GarageType2 = 'Dummy: GarageType=2' ;
MPRINT(EM_DIAGRAM):   label GarageType2 = 'Dummy: GarageType=2' ;
21988     +
21989     +      label GarageType3 = 'Dummy: GarageType=3' ;
MPRINT(EM_DIAGRAM):   label GarageType3 = 'Dummy: GarageType=3' ;
21990     +
21991     +      label GarageType4 = 'Dummy: GarageType=4' ;
MPRINT(EM_DIAGRAM):   label GarageType4 = 'Dummy: GarageType=4' ;
21992     +
21993     +      label LotSize1 = 'Dummy: LotSize=1' ;
MPRINT(EM_DIAGRAM):   label LotSize1 = 'Dummy: LotSize=1' ;
21994     +
21995     +      label Neighborhood1 = 'Dummy: Neighborhood=1' ;
MPRINT(EM_DIAGRAM):   label Neighborhood1 = 'Dummy: Neighborhood=1' ;
21996     +
21997     +      label WallType1 = 'Dummy: WallType=1' ;
MPRINT(EM_DIAGRAM):   label WallType1 = 'Dummy: WallType=1' ;
21998     +
21999     +      label WallType2 = 'Dummy: WallType=2' ;
MPRINT(EM_DIAGRAM):   label WallType2 = 'Dummy: WallType=2' ;
22000     +
22001     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
22002     +
22003     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
22004     +
22005     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
22006     +
22007     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
22008     +
22009     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
22010     +
22011     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
22012     +
22013     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
22014     +drop CentralAir0 ;
MPRINT(EM_DIAGRAM):   drop CentralAir0 ;
22015     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
22016     +   CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
22017     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22018     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22019     +end;
MPRINT(EM_DIAGRAM):   end;
22020     +else do;
MPRINT(EM_DIAGRAM):   else do;
22021     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22022     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
22023     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22024     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22025     +      CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   CentralAir0 = -1;
22026     +   end;
MPRINT(EM_DIAGRAM):   end;
22027     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22028     +      CentralAir0 = 1;
MPRINT(EM_DIAGRAM):   CentralAir0 = 1;
22029     +   end;
MPRINT(EM_DIAGRAM):   end;
22030     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22031     +      CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
22032     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22033     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22034     +   end;
MPRINT(EM_DIAGRAM):   end;
22035     +end;
MPRINT(EM_DIAGRAM):   end;
22036     +
22037     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
22038     +drop BasementType0 BasementType1 ;
MPRINT(EM_DIAGRAM):   drop BasementType0 BasementType1 ;
22039     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
22040     +   BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
22041     +   BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
22042     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22043     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22044     +end;
MPRINT(EM_DIAGRAM):   end;
22045     +else do;
MPRINT(EM_DIAGRAM):   else do;
22046     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22047     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
22048     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22049     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22050     +      BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType0 = -1;
22051     +      BasementType1 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = -1;
22052     +   end;
MPRINT(EM_DIAGRAM):   end;
22053     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22054     +      BasementType0 = 0;
MPRINT(EM_DIAGRAM):   BasementType0 = 0;
22055     +      BasementType1 = 1;
MPRINT(EM_DIAGRAM):   BasementType1 = 1;
22056     +   end;
MPRINT(EM_DIAGRAM):   end;
22057     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22058     +      BasementType0 = 1;
MPRINT(EM_DIAGRAM):   BasementType0 = 1;
22059     +      BasementType1 = 0;
MPRINT(EM_DIAGRAM):   BasementType1 = 0;
22060     +   end;
MPRINT(EM_DIAGRAM):   end;
22061     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22062     +      BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
22063     +      BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
22064     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22065     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22066     +   end;
MPRINT(EM_DIAGRAM):   end;
22067     +end;
MPRINT(EM_DIAGRAM):   end;
22068     +
22069     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
22070     +drop ConstructionType1 ConstructionType2 ;
MPRINT(EM_DIAGRAM):   drop ConstructionType1 ConstructionType2 ;
22071     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
22072     +   ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
22073     +   ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
22074     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22075     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22076     +end;
MPRINT(EM_DIAGRAM):   end;
22077     +else do;
MPRINT(EM_DIAGRAM):   else do;
22078     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22079     +   _dm12 = put( ConstructionType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
22080     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22081     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22082     +      ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 1;
22083     +      ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 0;
22084     +   end;
MPRINT(EM_DIAGRAM):   end;
22085     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22086     +      ConstructionType1 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 0;
22087     +      ConstructionType2 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 1;
22088     +   end;
MPRINT(EM_DIAGRAM):   end;
22089     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22090     +      ConstructionType1 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = -1;
22091     +      ConstructionType2 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = -1;
22092     +   end;
MPRINT(EM_DIAGRAM):   end;
22093     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22094     +      ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
22095     +      ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
22096     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22097     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22098     +   end;
MPRINT(EM_DIAGRAM):   end;
22099     +end;
MPRINT(EM_DIAGRAM):   end;
22100     +
22101     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
22102     +drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
MPRINT(EM_DIAGRAM):   drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
22103     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22104     +GarageType0 = 0;
MPRINT(EM_DIAGRAM):   GarageType0 = 0;
22105     +GarageType1 = 0;
MPRINT(EM_DIAGRAM):   GarageType1 = 0;
22106     +GarageType2 = 0;
MPRINT(EM_DIAGRAM):   GarageType2 = 0;
22107     +GarageType3 = 0;
MPRINT(EM_DIAGRAM):   GarageType3 = 0;
22108     +GarageType4 = 0;
MPRINT(EM_DIAGRAM):   GarageType4 = 0;
22109     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
22110     +   GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
22111     +   GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
22112     +   GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
22113     +   GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
22114     +   GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
22115     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22116     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22117     +end;
MPRINT(EM_DIAGRAM):   end;
22118     +else do;
MPRINT(EM_DIAGRAM):   else do;
22119     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22120     +   _dm12 = put( GarageType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
22121     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22122     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22123     +      GarageType2 = 1;
MPRINT(EM_DIAGRAM):   GarageType2 = 1;
22124     +   end;
MPRINT(EM_DIAGRAM):   end;
22125     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22126     +      GarageType0 = 1;
MPRINT(EM_DIAGRAM):   GarageType0 = 1;
22127     +   end;
MPRINT(EM_DIAGRAM):   end;
22128     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22129     +      GarageType3 = 1;
MPRINT(EM_DIAGRAM):   GarageType3 = 1;
22130     +   end;
MPRINT(EM_DIAGRAM):   end;
22131     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22132     +      GarageType1 = 1;
MPRINT(EM_DIAGRAM):   GarageType1 = 1;
22133     +   end;
MPRINT(EM_DIAGRAM):   end;
22134     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22135     +      GarageType4 = 1;
MPRINT(EM_DIAGRAM):   GarageType4 = 1;
22136     +   end;
MPRINT(EM_DIAGRAM):   end;
22137     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
22138     +      GarageType0 = -1;
MPRINT(EM_DIAGRAM):   GarageType0 = -1;
22139     +      GarageType1 = -1;
MPRINT(EM_DIAGRAM):   GarageType1 = -1;
22140     +      GarageType2 = -1;
MPRINT(EM_DIAGRAM):   GarageType2 = -1;
22141     +      GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType3 = -1;
22142     +      GarageType4 = -1;
MPRINT(EM_DIAGRAM):   GarageType4 = -1;
22143     +   end;
MPRINT(EM_DIAGRAM):   end;
22144     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22145     +      GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
22146     +      GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
22147     +      GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
22148     +      GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
22149     +      GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
22150     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22151     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22152     +   end;
MPRINT(EM_DIAGRAM):   end;
22153     +end;
MPRINT(EM_DIAGRAM):   end;
22154     +
22155     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
22156     +drop LotSize1 ;
MPRINT(EM_DIAGRAM):   drop LotSize1 ;
22157     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
22158     +   LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
22159     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22160     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22161     +end;
MPRINT(EM_DIAGRAM):   end;
22162     +else do;
MPRINT(EM_DIAGRAM):   else do;
22163     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22164     +   _dm12 = put( LotSize , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
22165     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22166     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22167     +      LotSize1 = 1;
MPRINT(EM_DIAGRAM):   LotSize1 = 1;
22168     +   end;
MPRINT(EM_DIAGRAM):   end;
22169     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22170     +      LotSize1 = -1;
MPRINT(EM_DIAGRAM):   LotSize1 = -1;
22171     +   end;
MPRINT(EM_DIAGRAM):   end;
22172     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22173     +      LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
22174     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22175     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22176     +   end;
MPRINT(EM_DIAGRAM):   end;
22177     +end;
MPRINT(EM_DIAGRAM):   end;
22178     +
22179     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
22180     +drop Neighborhood1 ;
MPRINT(EM_DIAGRAM):   drop Neighborhood1 ;
22181     +if missing( Neighborhood ) then do;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
22182     +   Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
22183     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22184     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22185     +end;
MPRINT(EM_DIAGRAM):   end;
22186     +else do;
MPRINT(EM_DIAGRAM):   else do;
22187     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22188     +   _dm12 = put( Neighborhood , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
22189     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22190     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22191     +      Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = 1;
22192     +   end;
MPRINT(EM_DIAGRAM):   end;
22193     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22194     +      Neighborhood1 = -1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = -1;
22195     +   end;
MPRINT(EM_DIAGRAM):   end;
22196     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22197     +      Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
22198     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22199     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22200     +   end;
MPRINT(EM_DIAGRAM):   end;
22201     +end;
MPRINT(EM_DIAGRAM):   end;
22202     +
22203     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
22204     +drop WallType1 WallType2 ;
MPRINT(EM_DIAGRAM):   drop WallType1 WallType2 ;
22205     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
22206     +   WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
22207     +   WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
22208     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22209     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22210     +end;
MPRINT(EM_DIAGRAM):   end;
22211     +else do;
MPRINT(EM_DIAGRAM):   else do;
22212     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22213     +   _dm12 = put( WallType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
22214     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22215     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22216     +      WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType1 = 0;
22217     +      WallType2 = 1;
MPRINT(EM_DIAGRAM):   WallType2 = 1;
22218     +   end;
MPRINT(EM_DIAGRAM):   end;
22219     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22220     +      WallType1 = 1;
MPRINT(EM_DIAGRAM):   WallType1 = 1;
22221     +      WallType2 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = 0;
22222     +   end;
MPRINT(EM_DIAGRAM):   end;
22223     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22224     +      WallType1 = -1;
MPRINT(EM_DIAGRAM):   WallType1 = -1;
22225     +      WallType2 = -1;
MPRINT(EM_DIAGRAM):   WallType2 = -1;
22226     +   end;
MPRINT(EM_DIAGRAM):   end;
22227     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22228     +      WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
22229     +      WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
22230     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22231     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22232     +   end;
MPRINT(EM_DIAGRAM):   end;
22233     +end;
MPRINT(EM_DIAGRAM):   end;
22234     +
22235     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22236     +*** Checking missing input Interval
22237     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
22238     +
22239     +IF NMISS(
22240     +   Age ,
22241     +   Basement ,
22242     +   Baths ,
22243     +   FirePlace ,
22244     +   FirstFloor ,
22245     +   GarageSize ,
22246     +   SecondFloor ,
22247     +   TotalArea ,
22248     +   UpperArea   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Age , Basement , Baths , FirePlace , FirstFloor , GarageSize , SecondFloor , TotalArea , UpperArea ) THEN DO;
22249     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
22250     +
22251     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22252     +END;
MPRINT(EM_DIAGRAM):   END;
22253     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22254     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
22255     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22256     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22257     +   S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
22258     +   S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
MPRINT(EM_DIAGRAM):   S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
22259     +   S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
22260     +   S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace ;
MPRINT(EM_DIAGRAM):   S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
22261     +   S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 * FirstFloor ;
MPRINT(EM_DIAGRAM):   S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
22262     +   S_GarageSize  =    -1.91179006286296 +     1.80006207217616 * GarageSize ;
MPRINT(EM_DIAGRAM):   S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
22263     +   S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 * SecondFloor
22264     +         ;
MPRINT(EM_DIAGRAM):   S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
22265     +   S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea ;
MPRINT(EM_DIAGRAM):   S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
22266     +   S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea ;
MPRINT(EM_DIAGRAM):   S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
22267     +END;
MPRINT(EM_DIAGRAM):   END;
22268     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22269     +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
22270     +   ELSE S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
22271     +   IF MISSING( Basement ) THEN S_Basement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Basement ) THEN S_Basement = . ;
22272     +   ELSE S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
MPRINT(EM_DIAGRAM):   ELSE S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
22273     +   IF MISSING( Baths ) THEN S_Baths  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Baths ) THEN S_Baths = . ;
22274     +   ELSE S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   ELSE S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
22275     +   IF MISSING( FirePlace ) THEN S_FirePlace  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirePlace ) THEN S_FirePlace = . ;
22276     +   ELSE S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace
22277     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
22278     +   IF MISSING( FirstFloor ) THEN S_FirstFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirstFloor ) THEN S_FirstFloor = . ;
22279     +   ELSE S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 *
22280     +        FirstFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
22281     +   IF MISSING( GarageSize ) THEN S_GarageSize  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( GarageSize ) THEN S_GarageSize = . ;
22282     +   ELSE S_GarageSize  =    -1.91179006286296 +     1.80006207217616 *
22283     +        GarageSize ;
MPRINT(EM_DIAGRAM):   ELSE S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
22284     +   IF MISSING( SecondFloor ) THEN S_SecondFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SecondFloor ) THEN S_SecondFloor = . ;
22285     +   ELSE S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 *
22286     +        SecondFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
22287     +   IF MISSING( TotalArea ) THEN S_TotalArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TotalArea ) THEN S_TotalArea = . ;
22288     +   ELSE S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea
22289     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
22290     +   IF MISSING( UpperArea ) THEN S_UpperArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( UpperArea ) THEN S_UpperArea = . ;
22291     +   ELSE S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea
22292     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
22293     +END;
MPRINT(EM_DIAGRAM):   END;
22294     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22295     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
22296     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22297     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22298     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
22299     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22300     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22301     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
22302     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22303     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22304     +   H11  =      1.0811253570757 * S_Age  +     1.03792758537926 * S_Basement
22305     +          +    -2.69045458789429 * S_Baths  +    -2.58989113774345 *
22306     +        S_FirePlace  +     0.54830269811199 * S_FirstFloor
22307     +          +    -0.60146709273223 * S_GarageSize  +    -3.01068259484666 *
22308     +        S_SecondFloor  +    -1.75346426289405 * S_TotalArea
22309     +          +      0.1066594151471 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H11 = 1.0811253570757 * S_Age + 1.03792758537926 * S_Basement + -2.69045458789429 * S_Baths + -2.58989113774345 * S_FirePlace + 0.54830269811199 * S_FirstFloor + -0.60146709273223 * S_GarageSize + -3.01068259484666 * S_SecondFloor +
-1.75346426289405 * S_TotalArea + 0.1066594151471 * S_UpperArea ;
22310     +   H12  =     10.6056539724815 * S_Age  +    -2.31341855571048 * S_Basement
22311     +          +    -5.99788787502048 * S_Baths  +    -7.38334355297016 *
22312     +        S_FirePlace  +     1.05929143867278 * S_FirstFloor
22313     +          +    -2.72023121554838 * S_GarageSize  +    -3.75486868145665 *
22314     +        S_SecondFloor  +    -0.99588977048035 * S_TotalArea
22315     +          +     1.76027618533929 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H12 = 10.6056539724815 * S_Age + -2.31341855571048 * S_Basement + -5.99788787502048 * S_Baths + -7.38334355297016 * S_FirePlace + 1.05929143867278 * S_FirstFloor + -2.72023121554838 * S_GarageSize + -3.75486868145665 * S_SecondFloor
+ -0.99588977048035 * S_TotalArea + 1.76027618533929 * S_UpperArea ;
22316     +   H13  =    -5.18859194462977 * S_Age  +    -0.37443474477444 * S_Basement
22317     +          +    -1.37099088047079 * S_Baths  +     -4.5197296446296 *
22318     +        S_FirePlace  +     2.34785274542451 * S_FirstFloor
22319     +          +     4.91553880125009 * S_GarageSize  +    -5.96160235964927 *
22320     +        S_SecondFloor  +    -0.36486914085505 * S_TotalArea
22321     +          +     4.36128438585689 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H13 = -5.18859194462977 * S_Age + -0.37443474477444 * S_Basement + -1.37099088047079 * S_Baths + -4.5197296446296 * S_FirePlace + 2.34785274542451 * S_FirstFloor + 4.91553880125009 * S_GarageSize + -5.96160235964927 * S_SecondFloor +
-0.36486914085505 * S_TotalArea + 4.36128438585689 * S_UpperArea ;
22322     +   H11  = H11  +     1.81926634733339 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.81926634733339 * CentralAir0 ;
22323     +   H12  = H12  +    -4.86126336764882 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -4.86126336764882 * CentralAir0 ;
22324     +   H13  = H13  +    -0.20065363380592 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.20065363380592 * CentralAir0 ;
22325     +   H11  = H11  +    -0.42553110742708 * BasementType0
22326     +          +     -2.8152494816675 * BasementType1  +    -2.28800421986934 *
22327     +        ConstructionType1  +    -3.68075682437434 * ConstructionType2
22328     +          +     0.66684549722599 * GarageType0  +     2.64229318877201 *
22329     +        GarageType1  +    -4.22584793258938 * GarageType2
22330     +          +    -5.84767011261514 * GarageType3  +     4.95381912857559 *
22331     +        GarageType4  +     2.81453134363659 * LotSize1
22332     +          +     0.84606045489123 * Neighborhood1  +     1.12668276015835 *
22333     +        WallType1  +     -1.6341125215042 * WallType2 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.42553110742708 * BasementType0 + -2.8152494816675 * BasementType1 + -2.28800421986934 * ConstructionType1 + -3.68075682437434 * ConstructionType2 + 0.66684549722599 * GarageType0 + 2.64229318877201 * GarageType1 +
-4.22584793258938 * GarageType2 + -5.84767011261514 * GarageType3 + 4.95381912857559 * GarageType4 + 2.81453134363659 * LotSize1 + 0.84606045489123 * Neighborhood1 + 1.12668276015835 * WallType1 + -1.6341125215042 * WallType2 ;
22334     +   H12  = H12  +     0.23390059615897 * BasementType0
22335     +          +     2.37386797364588 * BasementType1  +     3.08814617928987 *
22336     +        ConstructionType1  +     0.20121260732449 * ConstructionType2
22337     +          +     0.04617179753954 * GarageType0  +    -1.55515822727314 *
22338     +        GarageType1  +     1.59582509860167 * GarageType2
22339     +          +    -0.59394988854609 * GarageType3  +     0.53166320240066 *
22340     +        GarageType4  +    -0.19668617489595 * LotSize1
22341     +          +     0.74452834064345 * Neighborhood1  +    -0.33856071263169 *
22342     +        WallType1  +     0.06345085758378 * WallType2 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.23390059615897 * BasementType0 + 2.37386797364588 * BasementType1 + 3.08814617928987 * ConstructionType1 + 0.20121260732449 * ConstructionType2 + 0.04617179753954 * GarageType0 + -1.55515822727314 * GarageType1 +
1.59582509860167 * GarageType2 + -0.59394988854609 * GarageType3 + 0.53166320240066 * GarageType4 + -0.19668617489595 * LotSize1 + 0.74452834064345 * Neighborhood1 + -0.33856071263169 * WallType1 + 0.06345085758378 * WallType2 ;
22343     +   H13  = H13  +    -8.07933326269018 * BasementType0
22344     +          +     7.36156027392192 * BasementType1  +    -9.59373504486629 *
22345     +        ConstructionType1  +    -12.3677256166013 * ConstructionType2
22346     +          +     2.78825055889834 * GarageType0  +     3.79270710138806 *
22347     +        GarageType1  +     1.22833780125341 * GarageType2
22348     +          +     0.29971745302098 * GarageType3  +    -0.68441599424622 *
22349     +        GarageType4  +     2.77468836460675 * LotSize1
22350     +          +    -1.03164722246083 * Neighborhood1  +    -5.52469784074927 *
22351     +        WallType1  +      -3.976976433923 * WallType2 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -8.07933326269018 * BasementType0 + 7.36156027392192 * BasementType1 + -9.59373504486629 * ConstructionType1 + -12.3677256166013 * ConstructionType2 + 2.78825055889834 * GarageType0 + 3.79270710138806 * GarageType1 +
1.22833780125341 * GarageType2 + 0.29971745302098 * GarageType3 + -0.68441599424622 * GarageType4 + 2.77468836460675 * LotSize1 + -1.03164722246083 * Neighborhood1 + -5.52469784074927 * WallType1 + -3.976976433923 * WallType2 ;
22352     +   H11  =     1.60222125420424 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.60222125420424 + H11 ;
22353     +   H12  =    -2.23039981030315 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -2.23039981030315 + H12 ;
22354     +   H13  =      8.3867095651232 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 8.3867095651232 + H13 ;
22355     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
22356     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
22357     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
22358     +END;
MPRINT(EM_DIAGRAM):   END;
22359     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22360     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
22361     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
22362     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
22363     +END;
MPRINT(EM_DIAGRAM):   END;
22364     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22365     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
22366     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22367     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22368     +   P_SalePrice  =    -6005.49431992348 * H11  +    -1039.27897944343 * H12
22369     +          +     2531.16212071821 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = -6005.49431992348 * H11 + -1039.27897944343 * H12 + 2531.16212071821 * H13 ;
22370     +   P_SalePrice  =     77287.1480354503 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 77287.1480354503 + P_SalePrice ;
22371     +END;
MPRINT(EM_DIAGRAM):   END;
22372     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22373     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
22374     +END;
MPRINT(EM_DIAGRAM):   END;
22375     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
22376     +   P_SalePrice  =              76715.8;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76715.8;
22377     +END;
MPRINT(EM_DIAGRAM):   END;
22378     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
22379     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
22380     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
22381     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
22382     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
22383     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
22384     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
22385     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
22386     +drop
22387     +H11
22388     +H12
22389     +H13
22390     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
22391     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22392      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22393      quit;
22394      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22395      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22396      *------------------------------------------------------------*;
22397      * Neural: Scoring TEST data;
22398      *------------------------------------------------------------*;
22399      data EMWS1.Neural_TEST
22400      / view=EMWS1.Neural_TEST
22401      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TEST / view=EMWS1.Neural_TEST ;
22402      set EMWS1.Part_TEST
22403      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TEST ;
22404      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
22405     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22406     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
22407     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22408     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
22409     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
22410     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
22411     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
22412     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
22413     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
22414     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
22415     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
22416     +LENGTH _WARN_ $4
22417     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
22418     +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
22419     +
22420     +      label S_Basement = 'Standard: Basement' ;
MPRINT(EM_DIAGRAM):   label S_Basement = 'Standard: Basement' ;
22421     +
22422     +      label S_Baths = 'Standard: Baths' ;
MPRINT(EM_DIAGRAM):   label S_Baths = 'Standard: Baths' ;
22423     +
22424     +      label S_FirePlace = 'Standard: FirePlace' ;
MPRINT(EM_DIAGRAM):   label S_FirePlace = 'Standard: FirePlace' ;
22425     +
22426     +      label S_FirstFloor = 'Standard: FirstFloor' ;
MPRINT(EM_DIAGRAM):   label S_FirstFloor = 'Standard: FirstFloor' ;
22427     +
22428     +      label S_GarageSize = 'Standard: GarageSize' ;
MPRINT(EM_DIAGRAM):   label S_GarageSize = 'Standard: GarageSize' ;
22429     +
22430     +      label S_SecondFloor = 'Standard: SecondFloor' ;
MPRINT(EM_DIAGRAM):   label S_SecondFloor = 'Standard: SecondFloor' ;
22431     +
22432     +      label S_TotalArea = 'Standard: TotalArea' ;
MPRINT(EM_DIAGRAM):   label S_TotalArea = 'Standard: TotalArea' ;
22433     +
22434     +      label S_UpperArea = 'Standard: UpperArea' ;
MPRINT(EM_DIAGRAM):   label S_UpperArea = 'Standard: UpperArea' ;
22435     +
22436     +      label CentralAir0 = 'Dummy: CentralAir=0' ;
MPRINT(EM_DIAGRAM):   label CentralAir0 = 'Dummy: CentralAir=0' ;
22437     +
22438     +      label BasementType0 = 'Dummy: BasementType=0' ;
MPRINT(EM_DIAGRAM):   label BasementType0 = 'Dummy: BasementType=0' ;
22439     +
22440     +      label BasementType1 = 'Dummy: BasementType=1' ;
MPRINT(EM_DIAGRAM):   label BasementType1 = 'Dummy: BasementType=1' ;
22441     +
22442     +      label ConstructionType1 = 'Dummy: ConstructionType=1' ;
MPRINT(EM_DIAGRAM):   label ConstructionType1 = 'Dummy: ConstructionType=1' ;
22443     +
22444     +      label ConstructionType2 = 'Dummy: ConstructionType=2' ;
MPRINT(EM_DIAGRAM):   label ConstructionType2 = 'Dummy: ConstructionType=2' ;
22445     +
22446     +      label GarageType0 = 'Dummy: GarageType=0' ;
MPRINT(EM_DIAGRAM):   label GarageType0 = 'Dummy: GarageType=0' ;
22447     +
22448     +      label GarageType1 = 'Dummy: GarageType=1' ;
MPRINT(EM_DIAGRAM):   label GarageType1 = 'Dummy: GarageType=1' ;
22449     +
22450     +      label GarageType2 = 'Dummy: GarageType=2' ;
MPRINT(EM_DIAGRAM):   label GarageType2 = 'Dummy: GarageType=2' ;
22451     +
22452     +      label GarageType3 = 'Dummy: GarageType=3' ;
MPRINT(EM_DIAGRAM):   label GarageType3 = 'Dummy: GarageType=3' ;
22453     +
22454     +      label GarageType4 = 'Dummy: GarageType=4' ;
MPRINT(EM_DIAGRAM):   label GarageType4 = 'Dummy: GarageType=4' ;
22455     +
22456     +      label LotSize1 = 'Dummy: LotSize=1' ;
MPRINT(EM_DIAGRAM):   label LotSize1 = 'Dummy: LotSize=1' ;
22457     +
22458     +      label Neighborhood1 = 'Dummy: Neighborhood=1' ;
MPRINT(EM_DIAGRAM):   label Neighborhood1 = 'Dummy: Neighborhood=1' ;
22459     +
22460     +      label WallType1 = 'Dummy: WallType=1' ;
MPRINT(EM_DIAGRAM):   label WallType1 = 'Dummy: WallType=1' ;
22461     +
22462     +      label WallType2 = 'Dummy: WallType=2' ;
MPRINT(EM_DIAGRAM):   label WallType2 = 'Dummy: WallType=2' ;
22463     +
22464     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
22465     +
22466     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
22467     +
22468     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
22469     +
22470     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
22471     +
22472     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
22473     +
22474     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
22475     +
22476     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
22477     +drop CentralAir0 ;
MPRINT(EM_DIAGRAM):   drop CentralAir0 ;
22478     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
22479     +   CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
22480     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22481     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22482     +end;
MPRINT(EM_DIAGRAM):   end;
22483     +else do;
MPRINT(EM_DIAGRAM):   else do;
22484     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22485     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
22486     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22487     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22488     +      CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   CentralAir0 = -1;
22489     +   end;
MPRINT(EM_DIAGRAM):   end;
22490     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22491     +      CentralAir0 = 1;
MPRINT(EM_DIAGRAM):   CentralAir0 = 1;
22492     +   end;
MPRINT(EM_DIAGRAM):   end;
22493     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22494     +      CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
22495     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22496     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22497     +   end;
MPRINT(EM_DIAGRAM):   end;
22498     +end;
MPRINT(EM_DIAGRAM):   end;
22499     +
22500     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
22501     +drop BasementType0 BasementType1 ;
MPRINT(EM_DIAGRAM):   drop BasementType0 BasementType1 ;
22502     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
22503     +   BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
22504     +   BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
22505     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22506     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22507     +end;
MPRINT(EM_DIAGRAM):   end;
22508     +else do;
MPRINT(EM_DIAGRAM):   else do;
22509     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22510     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
22511     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22512     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22513     +      BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType0 = -1;
22514     +      BasementType1 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = -1;
22515     +   end;
MPRINT(EM_DIAGRAM):   end;
22516     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22517     +      BasementType0 = 0;
MPRINT(EM_DIAGRAM):   BasementType0 = 0;
22518     +      BasementType1 = 1;
MPRINT(EM_DIAGRAM):   BasementType1 = 1;
22519     +   end;
MPRINT(EM_DIAGRAM):   end;
22520     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22521     +      BasementType0 = 1;
MPRINT(EM_DIAGRAM):   BasementType0 = 1;
22522     +      BasementType1 = 0;
MPRINT(EM_DIAGRAM):   BasementType1 = 0;
22523     +   end;
MPRINT(EM_DIAGRAM):   end;
22524     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22525     +      BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
22526     +      BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
22527     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22528     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22529     +   end;
MPRINT(EM_DIAGRAM):   end;
22530     +end;
MPRINT(EM_DIAGRAM):   end;
22531     +
22532     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
22533     +drop ConstructionType1 ConstructionType2 ;
MPRINT(EM_DIAGRAM):   drop ConstructionType1 ConstructionType2 ;
22534     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
22535     +   ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
22536     +   ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
22537     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22538     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22539     +end;
MPRINT(EM_DIAGRAM):   end;
22540     +else do;
MPRINT(EM_DIAGRAM):   else do;
22541     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22542     +   _dm12 = put( ConstructionType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
22543     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22544     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22545     +      ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 1;
22546     +      ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 0;
22547     +   end;
MPRINT(EM_DIAGRAM):   end;
22548     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22549     +      ConstructionType1 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 0;
22550     +      ConstructionType2 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 1;
22551     +   end;
MPRINT(EM_DIAGRAM):   end;
22552     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22553     +      ConstructionType1 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = -1;
22554     +      ConstructionType2 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = -1;
22555     +   end;
MPRINT(EM_DIAGRAM):   end;
22556     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22557     +      ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
22558     +      ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
22559     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22560     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22561     +   end;
MPRINT(EM_DIAGRAM):   end;
22562     +end;
MPRINT(EM_DIAGRAM):   end;
22563     +
22564     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
22565     +drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
MPRINT(EM_DIAGRAM):   drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
22566     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22567     +GarageType0 = 0;
MPRINT(EM_DIAGRAM):   GarageType0 = 0;
22568     +GarageType1 = 0;
MPRINT(EM_DIAGRAM):   GarageType1 = 0;
22569     +GarageType2 = 0;
MPRINT(EM_DIAGRAM):   GarageType2 = 0;
22570     +GarageType3 = 0;
MPRINT(EM_DIAGRAM):   GarageType3 = 0;
22571     +GarageType4 = 0;
MPRINT(EM_DIAGRAM):   GarageType4 = 0;
22572     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
22573     +   GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
22574     +   GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
22575     +   GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
22576     +   GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
22577     +   GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
22578     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22579     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22580     +end;
MPRINT(EM_DIAGRAM):   end;
22581     +else do;
MPRINT(EM_DIAGRAM):   else do;
22582     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22583     +   _dm12 = put( GarageType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
22584     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22585     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22586     +      GarageType2 = 1;
MPRINT(EM_DIAGRAM):   GarageType2 = 1;
22587     +   end;
MPRINT(EM_DIAGRAM):   end;
22588     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22589     +      GarageType0 = 1;
MPRINT(EM_DIAGRAM):   GarageType0 = 1;
22590     +   end;
MPRINT(EM_DIAGRAM):   end;
22591     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22592     +      GarageType3 = 1;
MPRINT(EM_DIAGRAM):   GarageType3 = 1;
22593     +   end;
MPRINT(EM_DIAGRAM):   end;
22594     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22595     +      GarageType1 = 1;
MPRINT(EM_DIAGRAM):   GarageType1 = 1;
22596     +   end;
MPRINT(EM_DIAGRAM):   end;
22597     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22598     +      GarageType4 = 1;
MPRINT(EM_DIAGRAM):   GarageType4 = 1;
22599     +   end;
MPRINT(EM_DIAGRAM):   end;
22600     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
22601     +      GarageType0 = -1;
MPRINT(EM_DIAGRAM):   GarageType0 = -1;
22602     +      GarageType1 = -1;
MPRINT(EM_DIAGRAM):   GarageType1 = -1;
22603     +      GarageType2 = -1;
MPRINT(EM_DIAGRAM):   GarageType2 = -1;
22604     +      GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType3 = -1;
22605     +      GarageType4 = -1;
MPRINT(EM_DIAGRAM):   GarageType4 = -1;
22606     +   end;
MPRINT(EM_DIAGRAM):   end;
22607     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22608     +      GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
22609     +      GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
22610     +      GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
22611     +      GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
22612     +      GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
22613     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22614     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22615     +   end;
MPRINT(EM_DIAGRAM):   end;
22616     +end;
MPRINT(EM_DIAGRAM):   end;
22617     +
22618     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
22619     +drop LotSize1 ;
MPRINT(EM_DIAGRAM):   drop LotSize1 ;
22620     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
22621     +   LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
22622     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22623     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22624     +end;
MPRINT(EM_DIAGRAM):   end;
22625     +else do;
MPRINT(EM_DIAGRAM):   else do;
22626     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22627     +   _dm12 = put( LotSize , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
22628     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22629     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22630     +      LotSize1 = 1;
MPRINT(EM_DIAGRAM):   LotSize1 = 1;
22631     +   end;
MPRINT(EM_DIAGRAM):   end;
22632     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22633     +      LotSize1 = -1;
MPRINT(EM_DIAGRAM):   LotSize1 = -1;
22634     +   end;
MPRINT(EM_DIAGRAM):   end;
22635     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22636     +      LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
22637     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22638     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22639     +   end;
MPRINT(EM_DIAGRAM):   end;
22640     +end;
MPRINT(EM_DIAGRAM):   end;
22641     +
22642     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
22643     +drop Neighborhood1 ;
MPRINT(EM_DIAGRAM):   drop Neighborhood1 ;
22644     +if missing( Neighborhood ) then do;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
22645     +   Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
22646     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22647     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22648     +end;
MPRINT(EM_DIAGRAM):   end;
22649     +else do;
MPRINT(EM_DIAGRAM):   else do;
22650     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22651     +   _dm12 = put( Neighborhood , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
22652     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22653     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22654     +      Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = 1;
22655     +   end;
MPRINT(EM_DIAGRAM):   end;
22656     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22657     +      Neighborhood1 = -1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = -1;
22658     +   end;
MPRINT(EM_DIAGRAM):   end;
22659     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22660     +      Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
22661     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22662     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22663     +   end;
MPRINT(EM_DIAGRAM):   end;
22664     +end;
MPRINT(EM_DIAGRAM):   end;
22665     +
22666     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
22667     +drop WallType1 WallType2 ;
MPRINT(EM_DIAGRAM):   drop WallType1 WallType2 ;
22668     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
22669     +   WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
22670     +   WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
22671     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22672     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22673     +end;
MPRINT(EM_DIAGRAM):   end;
22674     +else do;
MPRINT(EM_DIAGRAM):   else do;
22675     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22676     +   _dm12 = put( WallType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
22677     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22678     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22679     +      WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType1 = 0;
22680     +      WallType2 = 1;
MPRINT(EM_DIAGRAM):   WallType2 = 1;
22681     +   end;
MPRINT(EM_DIAGRAM):   end;
22682     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22683     +      WallType1 = 1;
MPRINT(EM_DIAGRAM):   WallType1 = 1;
22684     +      WallType2 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = 0;
22685     +   end;
MPRINT(EM_DIAGRAM):   end;
22686     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22687     +      WallType1 = -1;
MPRINT(EM_DIAGRAM):   WallType1 = -1;
22688     +      WallType2 = -1;
MPRINT(EM_DIAGRAM):   WallType2 = -1;
22689     +   end;
MPRINT(EM_DIAGRAM):   end;
22690     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22691     +      WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
22692     +      WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
22693     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22694     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22695     +   end;
MPRINT(EM_DIAGRAM):   end;
22696     +end;
MPRINT(EM_DIAGRAM):   end;
22697     +
22698     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22699     +*** Checking missing input Interval
22700     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
22701     +
22702     +IF NMISS(
22703     +   Age ,
22704     +   Basement ,
22705     +   Baths ,
22706     +   FirePlace ,
22707     +   FirstFloor ,
22708     +   GarageSize ,
22709     +   SecondFloor ,
22710     +   TotalArea ,
22711     +   UpperArea   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Age , Basement , Baths , FirePlace , FirstFloor , GarageSize , SecondFloor , TotalArea , UpperArea ) THEN DO;
22712     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
22713     +
22714     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22715     +END;
MPRINT(EM_DIAGRAM):   END;
22716     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22717     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
22718     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22719     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22720     +   S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
22721     +   S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
MPRINT(EM_DIAGRAM):   S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
22722     +   S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
22723     +   S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace ;
MPRINT(EM_DIAGRAM):   S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
22724     +   S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 * FirstFloor ;
MPRINT(EM_DIAGRAM):   S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
22725     +   S_GarageSize  =    -1.91179006286296 +     1.80006207217616 * GarageSize ;
MPRINT(EM_DIAGRAM):   S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
22726     +   S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 * SecondFloor
22727     +         ;
MPRINT(EM_DIAGRAM):   S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
22728     +   S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea ;
MPRINT(EM_DIAGRAM):   S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
22729     +   S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea ;
MPRINT(EM_DIAGRAM):   S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
22730     +END;
MPRINT(EM_DIAGRAM):   END;
22731     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22732     +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
22733     +   ELSE S_Age  =     -5.5344062379496 +     0.11558244339661 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -5.5344062379496 + 0.11558244339661 * Age ;
22734     +   IF MISSING( Basement ) THEN S_Basement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Basement ) THEN S_Basement = . ;
22735     +   ELSE S_Basement  =    -0.49282257208576 +     0.00345263917246 * Basement ;
MPRINT(EM_DIAGRAM):   ELSE S_Basement = -0.49282257208576 + 0.00345263917246 * Basement ;
22736     +   IF MISSING( Baths ) THEN S_Baths  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Baths ) THEN S_Baths = . ;
22737     +   ELSE S_Baths  =    -1.73164257267769 +     1.06846031080112 * Baths ;
MPRINT(EM_DIAGRAM):   ELSE S_Baths = -1.73164257267769 + 1.06846031080112 * Baths ;
22738     +   IF MISSING( FirePlace ) THEN S_FirePlace  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirePlace ) THEN S_FirePlace = . ;
22739     +   ELSE S_FirePlace  =    -2.05904915846369 +     2.38849702381788 * FirePlace
22740     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_FirePlace = -2.05904915846369 + 2.38849702381788 * FirePlace ;
22741     +   IF MISSING( FirstFloor ) THEN S_FirstFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirstFloor ) THEN S_FirstFloor = . ;
22742     +   ELSE S_FirstFloor  =    -5.24475132970949 +     0.00504868813728 *
22743     +        FirstFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_FirstFloor = -5.24475132970949 + 0.00504868813728 * FirstFloor ;
22744     +   IF MISSING( GarageSize ) THEN S_GarageSize  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( GarageSize ) THEN S_GarageSize = . ;
22745     +   ELSE S_GarageSize  =    -1.91179006286296 +     1.80006207217616 *
22746     +        GarageSize ;
MPRINT(EM_DIAGRAM):   ELSE S_GarageSize = -1.91179006286296 + 1.80006207217616 * GarageSize ;
22747     +   IF MISSING( SecondFloor ) THEN S_SecondFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SecondFloor ) THEN S_SecondFloor = . ;
22748     +   ELSE S_SecondFloor  =    -0.32848444737012 +      0.0038758438334 *
22749     +        SecondFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_SecondFloor = -0.32848444737012 + 0.0038758438334 * SecondFloor ;
22750     +   IF MISSING( TotalArea ) THEN S_TotalArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TotalArea ) THEN S_TotalArea = . ;
22751     +   ELSE S_TotalArea  =    -4.17820497934562 +     0.00290463340639 * TotalArea
22752     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_TotalArea = -4.17820497934562 + 0.00290463340639 * TotalArea ;
22753     +   IF MISSING( UpperArea ) THEN S_UpperArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( UpperArea ) THEN S_UpperArea = . ;
22754     +   ELSE S_UpperArea  =    -1.27983222733868 +      0.0040645612494 * UpperArea
22755     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_UpperArea = -1.27983222733868 + 0.0040645612494 * UpperArea ;
22756     +END;
MPRINT(EM_DIAGRAM):   END;
22757     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22758     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
22759     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22760     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22761     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
22762     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22763     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22764     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
22765     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22766     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22767     +   H11  =      1.0811253570757 * S_Age  +     1.03792758537926 * S_Basement
22768     +          +    -2.69045458789429 * S_Baths  +    -2.58989113774345 *
22769     +        S_FirePlace  +     0.54830269811199 * S_FirstFloor
22770     +          +    -0.60146709273223 * S_GarageSize  +    -3.01068259484666 *
22771     +        S_SecondFloor  +    -1.75346426289405 * S_TotalArea
22772     +          +      0.1066594151471 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H11 = 1.0811253570757 * S_Age + 1.03792758537926 * S_Basement + -2.69045458789429 * S_Baths + -2.58989113774345 * S_FirePlace + 0.54830269811199 * S_FirstFloor + -0.60146709273223 * S_GarageSize + -3.01068259484666 * S_SecondFloor +
-1.75346426289405 * S_TotalArea + 0.1066594151471 * S_UpperArea ;
22773     +   H12  =     10.6056539724815 * S_Age  +    -2.31341855571048 * S_Basement
22774     +          +    -5.99788787502048 * S_Baths  +    -7.38334355297016 *
22775     +        S_FirePlace  +     1.05929143867278 * S_FirstFloor
22776     +          +    -2.72023121554838 * S_GarageSize  +    -3.75486868145665 *
22777     +        S_SecondFloor  +    -0.99588977048035 * S_TotalArea
22778     +          +     1.76027618533929 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H12 = 10.6056539724815 * S_Age + -2.31341855571048 * S_Basement + -5.99788787502048 * S_Baths + -7.38334355297016 * S_FirePlace + 1.05929143867278 * S_FirstFloor + -2.72023121554838 * S_GarageSize + -3.75486868145665 * S_SecondFloor
+ -0.99588977048035 * S_TotalArea + 1.76027618533929 * S_UpperArea ;
22779     +   H13  =    -5.18859194462977 * S_Age  +    -0.37443474477444 * S_Basement
22780     +          +    -1.37099088047079 * S_Baths  +     -4.5197296446296 *
22781     +        S_FirePlace  +     2.34785274542451 * S_FirstFloor
22782     +          +     4.91553880125009 * S_GarageSize  +    -5.96160235964927 *
22783     +        S_SecondFloor  +    -0.36486914085505 * S_TotalArea
22784     +          +     4.36128438585689 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H13 = -5.18859194462977 * S_Age + -0.37443474477444 * S_Basement + -1.37099088047079 * S_Baths + -4.5197296446296 * S_FirePlace + 2.34785274542451 * S_FirstFloor + 4.91553880125009 * S_GarageSize + -5.96160235964927 * S_SecondFloor +
-0.36486914085505 * S_TotalArea + 4.36128438585689 * S_UpperArea ;
22785     +   H11  = H11  +     1.81926634733339 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.81926634733339 * CentralAir0 ;
22786     +   H12  = H12  +    -4.86126336764882 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -4.86126336764882 * CentralAir0 ;
22787     +   H13  = H13  +    -0.20065363380592 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.20065363380592 * CentralAir0 ;
22788     +   H11  = H11  +    -0.42553110742708 * BasementType0
22789     +          +     -2.8152494816675 * BasementType1  +    -2.28800421986934 *
22790     +        ConstructionType1  +    -3.68075682437434 * ConstructionType2
22791     +          +     0.66684549722599 * GarageType0  +     2.64229318877201 *
22792     +        GarageType1  +    -4.22584793258938 * GarageType2
22793     +          +    -5.84767011261514 * GarageType3  +     4.95381912857559 *
22794     +        GarageType4  +     2.81453134363659 * LotSize1
22795     +          +     0.84606045489123 * Neighborhood1  +     1.12668276015835 *
22796     +        WallType1  +     -1.6341125215042 * WallType2 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.42553110742708 * BasementType0 + -2.8152494816675 * BasementType1 + -2.28800421986934 * ConstructionType1 + -3.68075682437434 * ConstructionType2 + 0.66684549722599 * GarageType0 + 2.64229318877201 * GarageType1 +
-4.22584793258938 * GarageType2 + -5.84767011261514 * GarageType3 + 4.95381912857559 * GarageType4 + 2.81453134363659 * LotSize1 + 0.84606045489123 * Neighborhood1 + 1.12668276015835 * WallType1 + -1.6341125215042 * WallType2 ;
22797     +   H12  = H12  +     0.23390059615897 * BasementType0
22798     +          +     2.37386797364588 * BasementType1  +     3.08814617928987 *
22799     +        ConstructionType1  +     0.20121260732449 * ConstructionType2
22800     +          +     0.04617179753954 * GarageType0  +    -1.55515822727314 *
22801     +        GarageType1  +     1.59582509860167 * GarageType2
22802     +          +    -0.59394988854609 * GarageType3  +     0.53166320240066 *
22803     +        GarageType4  +    -0.19668617489595 * LotSize1
22804     +          +     0.74452834064345 * Neighborhood1  +    -0.33856071263169 *
22805     +        WallType1  +     0.06345085758378 * WallType2 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.23390059615897 * BasementType0 + 2.37386797364588 * BasementType1 + 3.08814617928987 * ConstructionType1 + 0.20121260732449 * ConstructionType2 + 0.04617179753954 * GarageType0 + -1.55515822727314 * GarageType1 +
1.59582509860167 * GarageType2 + -0.59394988854609 * GarageType3 + 0.53166320240066 * GarageType4 + -0.19668617489595 * LotSize1 + 0.74452834064345 * Neighborhood1 + -0.33856071263169 * WallType1 + 0.06345085758378 * WallType2 ;
22806     +   H13  = H13  +    -8.07933326269018 * BasementType0
22807     +          +     7.36156027392192 * BasementType1  +    -9.59373504486629 *
22808     +        ConstructionType1  +    -12.3677256166013 * ConstructionType2
22809     +          +     2.78825055889834 * GarageType0  +     3.79270710138806 *
22810     +        GarageType1  +     1.22833780125341 * GarageType2
22811     +          +     0.29971745302098 * GarageType3  +    -0.68441599424622 *
22812     +        GarageType4  +     2.77468836460675 * LotSize1
22813     +          +    -1.03164722246083 * Neighborhood1  +    -5.52469784074927 *
22814     +        WallType1  +      -3.976976433923 * WallType2 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -8.07933326269018 * BasementType0 + 7.36156027392192 * BasementType1 + -9.59373504486629 * ConstructionType1 + -12.3677256166013 * ConstructionType2 + 2.78825055889834 * GarageType0 + 3.79270710138806 * GarageType1 +
1.22833780125341 * GarageType2 + 0.29971745302098 * GarageType3 + -0.68441599424622 * GarageType4 + 2.77468836460675 * LotSize1 + -1.03164722246083 * Neighborhood1 + -5.52469784074927 * WallType1 + -3.976976433923 * WallType2 ;
22815     +   H11  =     1.60222125420424 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.60222125420424 + H11 ;
22816     +   H12  =    -2.23039981030315 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -2.23039981030315 + H12 ;
22817     +   H13  =      8.3867095651232 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 8.3867095651232 + H13 ;
22818     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
22819     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
22820     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
22821     +END;
MPRINT(EM_DIAGRAM):   END;
22822     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22823     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
22824     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
22825     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
22826     +END;
MPRINT(EM_DIAGRAM):   END;
22827     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22828     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
22829     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22830     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22831     +   P_SalePrice  =    -6005.49431992348 * H11  +    -1039.27897944343 * H12
22832     +          +     2531.16212071821 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = -6005.49431992348 * H11 + -1039.27897944343 * H12 + 2531.16212071821 * H13 ;
22833     +   P_SalePrice  =     77287.1480354503 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 77287.1480354503 + P_SalePrice ;
22834     +END;
MPRINT(EM_DIAGRAM):   END;
22835     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
22836     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
22837     +END;
MPRINT(EM_DIAGRAM):   END;
22838     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
22839     +   P_SalePrice  =              76715.8;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76715.8;
22840     +END;
MPRINT(EM_DIAGRAM):   END;
22841     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
22842     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
22843     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
22844     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
22845     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
22846     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
22847     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
22848     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
22849     +drop
22850     +H11
22851     +H12
22852     +H13
22853     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
22854     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22855      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22856      quit;
22857      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22858      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22859      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
22860      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M3FH6TZD noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3FH6TZD;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3FH6TZD(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3FH6TZD;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3FH6TZD;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3VER6F4 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RINMNT(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VER6F4;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
23187      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
23188      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
23189      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
23190      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
23194      run;
23195      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
23196      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23197      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS1.NEURAL_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 16, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 16, 2015
Time:                14:09:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2H2MKFO "C:\Users\bteric01\Documents\Tutorials_Projects\Project_4\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2H2MKFO new;
MPRINT(EM_DIAGRAM):   run;
23221      data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
23222      set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
23223      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
23224      if _NAME_='OVERALL' then _NAME_='SalePrice';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='SalePrice';
23225      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
23226      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23227      proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
23228      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
23229      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 58 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23230      data EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT;
23231      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
23232      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
23233      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
23234      if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
23235      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23236      proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
23237      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
23238      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23239      %let _EMwarndup = 0;
23240      %let _EMtargetdup =;
23241      %let _EMASEtargetdup =;
23242      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
23243      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
23244      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
23245      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
23246      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
23247      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
23248      end;
MPRINT(EM_DIAGRAM):   end;
23249      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23250      proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
23251      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23252      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23253      proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
23254      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23255      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23256      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
23257      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
23258      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23259      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 17 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23260      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
23261      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
23262      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23263      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23264      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
23265      set EMWS1.Neural_TRAIN(keep=
23266      P_SalePrice
23267      R_SalePrice
23268      _WARN_
23269      SalePrice
23270      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
23271      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
NOTE: There were 145 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 145 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 145 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "TRAIN" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 67711.212619) / 957.593541849995), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 145);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 86863.083456;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 957.593541849995;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
27586      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
27587      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
27588      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
27589      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27590      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
27591      set EMWS1.Neural_VALIDATE(keep=
27592      P_SalePrice
27593      R_SalePrice
27594      _WARN_
27595      SalePrice
27596      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
27597      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 109 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 109 observations read from the data set EMWS1.NEURAL_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 109 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRESIDUAL WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "VALIDATE" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 67711.21278) / 957.593532949995), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 109);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 86863.083439;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 957.593532949995;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length P_LABEL $27;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
31922      %let _cn = %sysfunc(getoption(CENTER));
31923      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
31924      proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
31925      var STAT LABEL TRAIN
31926      VALIDATE
31927      TEST
31928      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
31929      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
31930      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31931      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
31932      run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31933      title10;
MPRINT(EM_DIAGRAM):   title10;
31934      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31935      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
31936      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
31937      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
31938      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
31939      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMRANK.DATA.
31940      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
31941      %let _cn = %sysfunc(getoption(CENTER));
31942      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
31943      proc print data=EMWS1.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMRANK label noobs;
31944      var
31945      decile N _targetMean_ _meanP_;
MPRINT(EM_DIAGRAM):   var decile N _targetMean_ _meanP_;
31946      by
31947      notsorted DATAROLE
31948      notsorted TARGET
31949      notsorted TARGETLABEL
31950      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
31951      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31952      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
31953      run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
31954      title10;
MPRINT(EM_DIAGRAM):   title10;
31955      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31956      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
31957      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
31958      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
31959      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
31960      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMSCOREDIST.DATA.
31961      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label _targetMean_ _meanp_ n score;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "SalePrice" );
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
